[{"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/index.js":"1","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/App.js":"2","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/reportWebVitals.js":"3","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/secure-route.js":"4","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/contexts/profile-context.js":"5","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/auth-service.js":"6","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/signup.js":"7","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/home.js":"8","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile.js":"9","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/login.js":"10","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/meme-details.js":"11","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/meme-service.js":"12","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/comment-service.js":"13","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/contexts/secure-context.js":"14","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/user-service.js":"15","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/meme-search.js":"16","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/navbar/index.js":"17","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/navbar/data.js":"18","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile-display.js":"19","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/user-profile.js":"20"},{"size":535,"mtime":1651207321182,"results":"21","hashOfConfig":"22"},{"size":2122,"mtime":1651356075603,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1649794828285,"results":"24","hashOfConfig":"22"},{"size":735,"mtime":1651287012456,"results":"25","hashOfConfig":"22"},{"size":1038,"mtime":1650682417330,"results":"26","hashOfConfig":"22"},{"size":728,"mtime":1650780575440,"results":"27","hashOfConfig":"22"},{"size":1813,"mtime":1651291474012,"results":"28","hashOfConfig":"22"},{"size":2894,"mtime":1651373199215,"results":"29","hashOfConfig":"22"},{"size":3067,"mtime":1651370640479,"results":"30","hashOfConfig":"22"},{"size":1540,"mtime":1651288702588,"results":"31","hashOfConfig":"22"},{"size":8820,"mtime":1651370180983,"results":"32","hashOfConfig":"22"},{"size":970,"mtime":1650835016122,"results":"33","hashOfConfig":"22"},{"size":653,"mtime":1651346601504,"results":"34","hashOfConfig":"22"},{"size":568,"mtime":1650745470183,"results":"35","hashOfConfig":"22"},{"size":2192,"mtime":1651291083437,"results":"36","hashOfConfig":"22"},{"size":1929,"mtime":1651286666281,"results":"37","hashOfConfig":"22"},{"size":1297,"mtime":1651292237247,"results":"38","hashOfConfig":"22"},{"size":271,"mtime":1651276989868,"results":"39","hashOfConfig":"22"},{"size":4141,"mtime":1651370659447,"results":"40","hashOfConfig":"22"},{"size":768,"mtime":1651367426360,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"15nj9w4",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"45"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"45"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"45"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"45"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"74"},"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/index.js",[],[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/App.js",["115"],[],"import logo from \"./logo.svg\";\n\nimport \"./vendors/bootstrap/bootstrap.min.css\";\nimport \"./vendors/fontawesome/css/all.min.css\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nimport SignUp from \"./components/screens/signup.js\";\nimport Login from \"./components/screens/login.js\";\nimport Profile from \"./components/screens/profile.js\";\nimport MemesSearch from \"./components/screens/meme-search.js\";\nimport Home from \"./components/screens/home.js\";\nimport { ProfileProvider } from \"./components/contexts/profile-context\";\nimport SecureRoute from \"./components/secure-route.js\";\nimport MemeDetails from \"./components/screens/meme-details.js\";\nimport NavigationSidebar from \"./components/navbar\";\nimport UserProfile from \"./components/screens/user-profile\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <ProfileProvider>\n        <BrowserRouter>\n          <div className=\"row\">\n            <div className=\"col-2\">\n              <NavigationSidebar />\n            </div>\n            <div className=\"col-8\">\n              <Routes>\n                <Route path=\"/\">\n                  <Route index element={<Home />} />\n                  <Route\n                    path=\"profile\"\n                    element={\n                      <SecureRoute>\n                        <Profile />\n                      </SecureRoute>\n                    }\n                  />\n                  <Route path=\"profile/:userID\" element={<UserProfile />} />\n                  <Route path=\"profile/signup\" element={<SignUp />} />\n                  <Route path=\"profile/login\" element={<Login />} />\n                  <Route path=\"meme-search\" element={<MemesSearch />}>\n                    <Route path=\":memeSearch\" element={<MemesSearch />} />\n                  </Route>\n                  <Route\n                    path=\"meme-search/details/:memeID\"\n                    element={<MemeDetails />}\n                  />\n                </Route>\n              </Routes>\n            </div>\n          </div>\n        </BrowserRouter>\n      </ProfileProvider>\n    </div>\n  );\n}\n\nexport default App;\n",[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/reportWebVitals.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/secure-route.js",["116"],[],"import React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { useProfile } from \"./contexts/profile-context\";\n\nconst SecureRoute = ({ children }) => {\n  const { checkLoggedIn } = useProfile();\n  const [currentUser, setCurrentUser] = useState();\n  const [waiting, setWaiting] = useState(true);\n  const check = async () => {\n    try {\n      const user = await checkLoggedIn();\n      setCurrentUser(user);\n      setWaiting(false);\n    } catch (e) {\n      setWaiting(false);\n    }\n  };\n  useEffect(() => {\n    check();\n  }, []);\n  if (currentUser) {\n    return children;\n  } else if (waiting) {\n    return null;\n  } else {\n    return <Navigate to=\"login\" />;\n  }\n};\n\nexport default SecureRoute;\n","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/contexts/profile-context.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/auth-service.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/signup.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/home.js",["117","118","119"],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile.js",["120","121","122","123","124"],[],"import React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\nimport ProfileDisplay from \"./profile-display\";\n\nconst Profile = () => {\n  const { profile } = useProfile();\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n\n  useEffect(() => {\n    checkUser();\n  }, []);\n\n  const logout = async () => {\n    await service.logout();\n    navigate(\"login\");\n  };\n\n  const checkUser = async () => {\n    const curUser = await userService.fetchUserById(profile._id);\n    setUser(curUser);\n    setEmail(curUser.data.email);\n    setUsername(curUser.data.username);\n    setPassword(curUser.data.password);\n  };\n\n  const handleUpdate = async () => {\n    if (!(email === \"\" || username === \"\" || password === \"\")) {\n      try {\n        await userService.updateUser(user, email, username, password);\n        const curUser = await userService.fetchUserById(profile._id);\n        setUser(curUser);\n      } catch (e) {\n        setIsValid(false);\n      }\n    } else {\n      setIsValid(false);\n    }\n  };\n\n  const profileInfo = ProfileDisplay(profile._id);\n  return user ? (\n    <div className=\"wrapper\">\n      <h2>Profile: {user.data.username}</h2>\n      <button className=\"btn btn-danger\" onClick={logout}>\n        Logout\n      </button>\n      <hr />\n      <div className=\"left-text position-relative\">\n        <div className=\"left-text\">\n          Email\n          <input\n            placeholder=\"email\"\n            className=\"form-control\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          Username\n          <input\n            placeholder=\"username\"\n            className=\"form-control\"\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          Password\n          <input\n            placeholder=\"password\"\n            className=\"form-control\"\n            type=\"text\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </div>\n        {!isValid && (\n          <div className=\"alert alert-danger alert-dismissible\" role=\"alert\">\n            <strong>Holy guacamole!</strong> You should check in on some of\n            those fields above.\n          </div>\n        )}\n        <div className=\"d-flex\">\n          <button onClick={handleUpdate} className=\"btn btn-primary\">\n            Update\n          </button>\n        </div>\n      </div>\n      {profileInfo}\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default Profile;\n",[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/login.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/meme-details.js",["125","126"],[],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, NavLink, Link } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\nimport { useProfile } from \"../contexts/profile-context.js\";\n\nconst MemeDetails = () => {\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const [liked, setLiked] = useState();\n  const [fav, setFav] = useState();\n  const [disliked, setDisliked] = useState();\n  const [comments, setComments] = useState([]);\n  const { memeID } = useParams();\n  const { checkLoggedIn } = useProfile();\n  const commentRef = useRef();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find((curMeme) => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const checkLiked = async () => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    const curLiked = curUser.data.likedMemes.includes(memeID);\n    setLiked(curLiked);\n    const curDisliked = curUser.data.dislikedMemes.includes(memeID);\n    setDisliked(curDisliked);\n  };\n\n  const checkFav = async () => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    const curFav = curUser.data.favoriteMeme === memeID;\n    setFav(curFav);\n  };\n\n  const findComments = async () => {\n    const comments = await commentService.findCommentsByMemeID(memeID);\n    setComments(comments);\n  };\n\n  const handleUserActions = async (action) => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    switch (action) {\n      case \"like\":\n        await userService.likeMeme(curUser.data, memeID);\n        break;\n      case \"unlike\":\n        await userService.unlikeMeme(curUser.data, memeID);\n        break;\n      case \"dislike\":\n        await userService.dislikeMeme(curUser.data, memeID);\n        break;\n      case \"undislike\":\n        await userService.undislikeMeme(curUser.data, memeID);\n        break;\n      case \"fav\":\n        await userService.favoriteMeme(curUser.data, memeID);\n        break;\n      case \"unfav\":\n        await userService.unfavoriteMeme(curUser.data);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleMemeActions = async (action) => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    let response;\n    switch (action) {\n      case \"like\":\n        response = await memeService.likeMeme(curMeme);\n        break;\n      case \"unlike\":\n        response = await memeService.unlikeMeme(curMeme);\n        break;\n      default:\n        return;\n    }\n    setOurMeme(response.data);\n  };\n\n  const handleComment = async () => {\n    const curSessionUser = await checkLoggedIn();\n    const actualComment = await commentService.postComment(\n      curSessionUser._id,\n      meme.id,\n      {\n        comment: commentRef.current.value,\n        commenter: curSessionUser._id,\n        username: curSessionUser.username,\n        memeName: meme.name,\n      }\n    );\n    console.log(meme);\n    setComments([...comments, actualComment]);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    checkLiked();\n    checkFav();\n    findComments();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"center-text bg-light meme-detail\">\n        <h2>{meme.name}</h2>\n        <div className={\"meme-div\"}>\n          <img src={meme.url} className={\"meme-image\"} />\n          <SecureContent\n            loggedInContent={\n              <div className=\"user-actions left-text d-flex\">\n                {\" \"}\n                <i\n                  className={`p-2 ps-0 ${\n                    liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"\n                  }`}\n                  onClick={async () => {\n                    if (liked) {\n                      handleMemeActions(\"unlike\");\n                      handleUserActions(\"unlike\");\n                      setLiked(false);\n                    } else if (!liked && disliked) {\n                      await handleMemeActions(\"like\");\n                      await handleUserActions(\"undislike\");\n                      await handleMemeActions(\"like\");\n                      await handleUserActions(\"like\");\n                      setLiked(true);\n                      setDisliked(false);\n                    } else {\n                      handleMemeActions(\"like\");\n                      handleUserActions(\"like\");\n                      setLiked(true);\n                    }\n                  }}\n                ></i>\n                <p className=\"p-1\">{(ourMeme && ourMeme.likes) || 0}</p>\n                <i\n                  className={`p-2 ${\n                    disliked\n                      ? \"fas fa-thumbs-down text-primary\"\n                      : \"fas fa-thumbs-down\"\n                  }`}\n                  onClick={async () => {\n                    if (disliked) {\n                      handleMemeActions(\"like\");\n                      handleUserActions(\"undislike\");\n                      setDisliked(false);\n                    } else if (liked && !disliked) {\n                      await handleMemeActions(\"unlike\");\n                      await handleUserActions(\"unlike\");\n                      await handleMemeActions(\"unlike\");\n                      await handleUserActions(\"dislike\");\n                      setDisliked(true);\n                      setLiked(false);\n                    } else {\n                      handleMemeActions(\"unlike\");\n                      handleUserActions(\"dislike\");\n                      setDisliked(true);\n                    }\n                  }}\n                ></i>\n                <i\n                  className={`ms-auto p-2 pe-0 ${\n                    fav ? \"fas fa-bookmark text-danger\" : \"fas fa-bookmark\"\n                  }`}\n                  onClick={async () => {\n                    if (fav) {\n                      handleUserActions(\"unfav\");\n                      setFav(false);\n                    } else {\n                      handleUserActions(\"fav\");\n                      setFav(true);\n                    }\n                  }}\n                ></i>\n              </div>\n            }\n            nonloggedInContent={\n              <div className=\"user-actions d-flex\">\n                <i\n                  className={`p-2 ps-0 ${\n                    liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"\n                  }`}\n                ></i>\n                <p className=\"p-1\">{(ourMeme && ourMeme.likes) || 0}</p>\n                <i\n                  className={`p-2 ${\n                    disliked\n                      ? \"fas fa-thumbs-down text-primary\"\n                      : \"fas fa-thumbs-down\"\n                  }`}\n                ></i>\n                <i className={\"ms-auto p-2 pe-0 fas fa-bookmark ml-auto\"}></i>\n              </div>\n            }\n          />\n        </div>\n      </div>\n      <hr />\n      <SecureContent\n        loggedInContent={\n          <div className=\"caption-div left-text position-relative\">\n            <h4>Caption the meme</h4>\n            <textarea\n              ref={commentRef}\n              placeholder=\"Add your own caption to the meme!\"\n              className=\"form-control bg-light\"\n            ></textarea>\n            <button\n              onClick={handleComment}\n              className=\"btn btn-primary position-absolute bottom-0 end-0\"\n            >\n              Post\n            </button>\n          </div>\n        }\n        nonloggedInContent={\n          <div className=\"d-flex pt-1\">\n            <h6> please </h6>{\" \"}\n            <NavLink to=\"/profile/login\" className=\"ps-1 pe-1 navLink\">\n              login\n            </NavLink>{\" \"}\n            <h6> to like, favorite or comment </h6>\n          </div>\n        }\n      />\n      <hr />\n      Captions:\n      <ul className=\"list-group pt-1 mb-4\">\n        {comments.length === 0 && \"Be the first one to caption the meme!\"}\n        {comments.map((comment) => (\n          <li className=\"list-group-item comment-item\">\n            <Link to={`/profile/${comment.commenter}`} className=\"links\">\n              {comment && comment.username}:\n            </Link>\n            <p className=\"comment\">{comment && comment.comment}</p>\n          </li>\n        ))}{\" \"}\n      </ul>\n    </div>\n  );\n};\n\nexport default MemeDetails;\n","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/meme-service.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/comment-service.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/contexts/secure-context.js",["127","128"],[],"import React, { useEffect, useState } from \"react\";\nimport { useProfile } from \"./profile-context\";\n\nconst SecureContent = ({ loggedInContent, nonloggedInContent }) => {\n  const { checkLoggedIn } = useProfile();\n  const [loggedIn, setLoggedIn] = useState(false);\n  const check = async () => {\n    try {\n      await checkLoggedIn();\n      setLoggedIn(true);\n    } catch (e) {\n      console.log(\"haw\");\n    }\n  };\n  useEffect(() => {\n    check();\n  }, []);\n  if (loggedIn) {\n    return loggedInContent;\n  }\n  return nonloggedInContent;\n};\n\nexport default SecureContent;\n","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/services/user-service.js",[],[],"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/meme-search.js",["129","130","131","132"],[],"import React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport * as memeService from \"../services/meme-service.js\";\n\nconst MemesSearch = () => {\n  const titleRef = useRef();\n  const { memeSearch } = useParams();\n  const navigate = useNavigate();\n  const [memes, setMemes] = useState([]);\n\n  const fetchMemes = async () => {\n    const searchString = titleRef.current.value || memeSearch;\n    const response = await memeService.fetchMemesFromAPI();\n    if (searchString === undefined || searchString === \" \") {\n      const first10 = response.data.data.memes\n        .sort(() => Math.random() - 0.5)\n        .slice(0, 10);\n      setMemes(first10);\n      navigate(`/meme-search/`);\n    } else {\n      setMemes(\n        response.data.data.memes.filter((meme) =>\n          meme.name.toLowerCase().includes(searchString)\n        )\n      );\n      titleRef.current.value = searchString;\n      navigate(`/meme-search/${searchString}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n\n  return (\n    <div className=\"left-text\">\n      <h2>Search Memes</h2>\n      <ul className=\"list-group meme-list\">\n        <div className=\"search-div list-group-item\">\n          <i className=\"fa fa-search\"></i>\n          <input\n            ref={titleRef}\n            className=\"form-control search-bar top_search\"\n          />\n          <button onClick={fetchMemes} className=\"btn btn-primary float-end \">\n            Search\n          </button>\n        </div>\n        <div className=\"left-text search search-bar\">\n          {memes.map((meme) => (\n            <Link to={`details/${meme.id}`} className=\"list-group-item\">\n              <img src={meme.url} height={30} className=\"me-2 meme-search\" />\n              {meme.name}\n            </Link>\n          ))}\n        </div>\n      </ul>\n    </div>\n  );\n};\n\nexport default MemesSearch;\n","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/navbar/index.js",["133"],[],"import React, { useEffect, useState } from \"react\";\nimport { NavBarData } from \"./data\";\nimport { Link } from \"react-router-dom\";\nimport { useLocation } from \"react-router\";\n\nconst NavigationSidebar = () => {\n  const [active, setActive] = useState();\n  const history = useLocation();\n  useEffect(() => {\n    setActive(window.location.pathname);\n  }, [history]);\n  return (\n    <div className=\"list-group center-text\">\n      <Link to={\"\"} className=\"list-group-item\" onClick={() => setActive(\"\")}>\n        <i className={`fab fa-magento position-relative me-1`}></i>\n      </Link>\n      {NavBarData.map((navItem) => (\n        <Link\n          to={navItem.path}\n          className={`list-group-item ${\n            window.location.pathname.includes(navItem.path) &&\n            navItem.path !== \"/\"\n              ? \"active\"\n              : window.location.pathname === \"/\" && navItem.path === \"/\"\n              ? \"active\"\n              : \"\"\n          }`}\n          onClick={() => setActive(navItem.name)}\n        >\n          <i className={`fas ${navItem.icon} position-relative me-1`}></i>\n          <div className=\"d-xl-inline d-lg-none d-md-none d-sm-none\">\n            {\" \"}\n            {navItem.name}\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n};\nexport default NavigationSidebar;\n","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/navbar/data.js",["134"],[],"import React from \"react\";\n\nexport const NavBarData = [\n  {\n    name: \"Home\",\n    path: \"/\",\n    icon: \"fa-home\",\n  },\n  {\n    name: \"Profile\",\n    path: \"profile\",\n    icon: \"fa-user\",\n  },\n  {\n    name: \"Search\",\n    path: \"meme-search\",\n    icon: \"fa-search\",\n  },\n];\n","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile-display.js",["135","136","137","138","139","140","141","142"],[],"import React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\n\nexport default function ProfileDisplay(userID) {\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n\n  const [likedMemes, setLikedMemes] = useState([]);\n  const [favMeme, setFavMeme] = useState();\n  const [comments, setComments] = useState([]);\n  const [commentedMemes, setCommentedMemes] = useState([]);\n\n  const checkUser = async () => {\n    const curUser = await userService.fetchUserById(userID);\n    setUser(curUser);\n  };\n\n  const loadLikedMemes = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeArr = [];\n    curUser.data.likedMemes.map(async (memeid) => {\n      const curMeme = response.data.data.memes.find(\n        (curMeme) => curMeme.id === memeid\n      );\n      if (curMeme) {\n        return memeArr.push(curMeme);\n      }\n    });\n    setLikedMemes(memeArr);\n  };\n\n  const fetchFavMeme = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeID = curUser.data.favoriteMeme;\n    setFavMeme(\n      response.data.data.memes.find((curMeme) => curMeme.id === memeID)\n    );\n  };\n\n  const fetchCommentedMemes = async () => {\n    const response = await commentService.findCommentsByUserId(userID);\n    const updatedComments = [];\n    response.map(async (curMeme) => {\n      const curMemeFromApi = await memeService.fetchMemesFromAPI();\n      const existing = curMemeFromApi.data.data.memes.find(\n        (curMemeFromAPI) => curMemeFromAPI.id === curMeme.memeID\n      );\n      if (existing) {\n        updatedComments.push(curMeme);\n      }\n    });\n    setComments(updatedComments);\n  };\n\n  useEffect(() => {\n    checkUser();\n    loadLikedMemes();\n    fetchFavMeme();\n    fetchCommentedMemes();\n  }, [setUser, setFavMeme, setComments, setCommentedMemes]);\n\n  return user ? (\n    <div className=\"wrapper\">\n      {favMeme && (\n        <div>\n          <hr />\n          <h5>Favorite Meme:</h5>\n          <div className=\"meme-display fav\">\n            <Link\n              to={`/meme-search/details/${favMeme.id}`}\n              className=\"list-group-item\"\n            >\n              <img\n                src={favMeme.url}\n                height={30}\n                className=\"me-2 meme-image-display\"\n              />\n              {favMeme.name}\n            </Link>\n          </div>\n        </div>\n      )}\n      {user.data.likedMemes.length !== 0 && (\n        <div>\n          <hr />\n          <h5>Liked Memes:</h5>\n          <div className=\"meme-display liked-memes\">\n            {likedMemes.map((meme) => (\n              <Link\n                to={`/meme-search/details/${meme.id}`}\n                className=\"list-group-item\"\n              >\n                <img\n                  src={meme.url}\n                  height={30}\n                  className=\"me-2 meme-image-display\"\n                />\n                {meme.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n      {comments.length !== 0 && (\n        <div>\n          <hr />\n          <h5>Captions:</h5>\n          <div className=\"meme-display captions\">\n            {comments.map((comment) => {\n              const data = (\n                <li className=\"list-group-item comment-item\">\n                  {comment && comment.username} on{\" \"}\n                  <Link to={`/meme-search/details/${comment.memeID}`}>\n                    {comment.memeName}\n                  </Link>\n                  :<p className=\"comment\">{comment && comment.comment}</p>\n                </li>\n              );\n              return data;\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  ) : (\n    \"\"\n  );\n}\n","/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/user-profile.js",["143","144","145","146"],[],"import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport ProfileDisplay from \"./profile-display\";\nimport * as userService from \"../services/user-service\";\n\nconst UserProfile = () => {\n  const { userID } = useParams();\n  const ProfileInfo = ProfileDisplay(userID);\n  const [user, setUser] = useState();\n  const checkUser = async () => {\n    const curUser = await userService.fetchUserById(userID);\n    setUser(curUser);\n  };\n  useEffect(() => {\n    checkUser();\n  }, []);\n  return (\n    <div>\n      {user && (\n        <div className=\"wrapper\">\n          <h2>Profile: {user.data.username}</h2>\n          {ProfileInfo}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserProfile;\n",{"ruleId":"147","severity":1,"message":"148","line":1,"column":8,"nodeType":"149","messageId":"150","endLine":1,"endColumn":12},{"ruleId":"151","severity":1,"message":"152","line":20,"column":6,"nodeType":"153","endLine":20,"endColumn":8,"suggestions":"154"},{"ruleId":"151","severity":1,"message":"155","line":38,"column":6,"nodeType":"153","endLine":38,"endColumn":8,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":59,"column":15,"nodeType":"159","endLine":59,"endColumn":77},{"ruleId":"157","severity":1,"message":"158","line":76,"column":21,"nodeType":"159","endLine":80,"endColumn":23},{"ruleId":"147","severity":1,"message":"160","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":23},{"ruleId":"147","severity":1,"message":"161","line":3,"column":10,"nodeType":"149","messageId":"150","endLine":3,"endColumn":14},{"ruleId":"147","severity":1,"message":"162","line":6,"column":13,"nodeType":"149","messageId":"150","endLine":6,"endColumn":24},{"ruleId":"147","severity":1,"message":"163","line":7,"column":13,"nodeType":"149","messageId":"150","endLine":7,"endColumn":27},{"ruleId":"151","severity":1,"message":"155","line":21,"column":6,"nodeType":"153","endLine":21,"endColumn":8,"suggestions":"164"},{"ruleId":"151","severity":1,"message":"165","line":120,"column":6,"nodeType":"153","endLine":120,"endColumn":8,"suggestions":"166"},{"ruleId":"157","severity":1,"message":"158","line":127,"column":11,"nodeType":"159","endLine":127,"endColumn":58},{"ruleId":"147","severity":1,"message":"167","line":1,"column":8,"nodeType":"149","messageId":"150","endLine":1,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":17,"column":6,"nodeType":"153","endLine":17,"endColumn":8,"suggestions":"168"},{"ruleId":"147","severity":1,"message":"169","line":2,"column":8,"nodeType":"149","messageId":"150","endLine":2,"endColumn":13},{"ruleId":"147","severity":1,"message":"170","line":3,"column":16,"nodeType":"149","messageId":"150","endLine":3,"endColumn":27},{"ruleId":"151","severity":1,"message":"171","line":34,"column":6,"nodeType":"153","endLine":34,"endColumn":8,"suggestions":"172"},{"ruleId":"157","severity":1,"message":"158","line":53,"column":15,"nodeType":"159","endLine":53,"endColumn":78},{"ruleId":"147","severity":1,"message":"173","line":7,"column":10,"nodeType":"149","messageId":"150","endLine":7,"endColumn":16},{"ruleId":"147","severity":1,"message":"167","line":1,"column":8,"nodeType":"149","messageId":"150","endLine":1,"endColumn":13},{"ruleId":"147","severity":1,"message":"160","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":23},{"ruleId":"147","severity":1,"message":"174","line":2,"column":13,"nodeType":"149","messageId":"150","endLine":2,"endColumn":20},{"ruleId":"147","severity":1,"message":"175","line":4,"column":10,"nodeType":"149","messageId":"150","endLine":4,"endColumn":20},{"ruleId":"147","severity":1,"message":"176","line":10,"column":9,"nodeType":"149","messageId":"150","endLine":10,"endColumn":17},{"ruleId":"147","severity":1,"message":"177","line":16,"column":10,"nodeType":"149","messageId":"150","endLine":16,"endColumn":24},{"ruleId":"151","severity":1,"message":"178","line":67,"column":6,"nodeType":"153","endLine":67,"endColumn":59,"suggestions":"179"},{"ruleId":"157","severity":1,"message":"158","line":80,"column":15,"nodeType":"159","endLine":84,"endColumn":17},{"ruleId":"157","severity":1,"message":"158","line":100,"column":17,"nodeType":"159","endLine":104,"endColumn":19},{"ruleId":"147","severity":1,"message":"161","line":2,"column":10,"nodeType":"149","messageId":"150","endLine":2,"endColumn":14},{"ruleId":"147","severity":1,"message":"170","line":2,"column":16,"nodeType":"149","messageId":"150","endLine":2,"endColumn":27},{"ruleId":"147","severity":1,"message":"180","line":2,"column":29,"nodeType":"149","messageId":"150","endLine":2,"endColumn":40},{"ruleId":"151","severity":1,"message":"155","line":16,"column":6,"nodeType":"153","endLine":16,"endColumn":8,"suggestions":"181"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'check'. Either include it or remove the dependency array.","ArrayExpression",["182"],"React Hook useEffect has a missing dependency: 'checkUser'. Either include it or remove the dependency array.",["183"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'Link' is defined but never used.","'memeService' is defined but never used.","'commentService' is defined but never used.",["184"],"React Hook useEffect has missing dependencies: 'checkFav', 'checkLiked', 'fetchMemeByID', 'fetchMemeByIDfromDatabase', and 'findComments'. Either include them or remove the dependency array.",["185"],"'React' is defined but never used.",["186"],"'axios' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchMemes'. Either include it or remove the dependency array.",["187"],"'active' is assigned a value but never used.","'service' is defined but never used.","'useProfile' is defined but never used.","'navigate' is assigned a value but never used.","'commentedMemes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkUser', 'fetchCommentedMemes', 'fetchFavMeme', and 'loadLikedMemes'. Either include them or remove the dependency array.",["188"],"'useNavigate' is defined but never used.",["189"],{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},{"desc":"195","fix":"196"},{"desc":"190","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"192","fix":"202"},"Update the dependencies array to be: [check]",{"range":"203","text":"204"},"Update the dependencies array to be: [checkUser]",{"range":"205","text":"206"},{"range":"207","text":"206"},"Update the dependencies array to be: [checkFav, checkLiked, fetchMemeByID, fetchMemeByIDfromDatabase, findComments]",{"range":"208","text":"209"},{"range":"210","text":"204"},"Update the dependencies array to be: [fetchMemes]",{"range":"211","text":"212"},"Update the dependencies array to be: [setUser, setFavMeme, setComments, setCommentedMemes, checkUser, loadLikedMemes, fetchFavMeme, fetchCommentedMemes]",{"range":"213","text":"214"},{"range":"215","text":"206"},[564,566],"[check]",[1267,1269],"[checkUser]",[824,826],[3711,3713],"[checkFav, checkLiked, fetchMemeByID, fetchMemeByIDfromDatabase, findComments]",[450,452],[1090,1092],"[fetchMemes]",[2236,2289],"[setUser, setFavMeme, setComments, setCommentedMemes, checkUser, loadLikedMemes, fetchFavMeme, fetchCommentedMemes]",[546,548]]