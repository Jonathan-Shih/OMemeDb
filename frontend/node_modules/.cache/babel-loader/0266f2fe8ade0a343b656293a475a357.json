{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as authService from \"../services/auth-service.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemeDetails = () => {\n  _s();\n\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const {\n    memeID\n  } = useParams();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find(curMeme => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeLikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url\n    };\n    const response = await memeService.likeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleUserLikes = async () => {\n    const curUser = await authService.profile();\n    console.log(curUser.id);\n    await userService.likeMeme(curUser, meme.id);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    console.log(meme);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: meme.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.url,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SecureContent, {\n      loggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-thumbs-up\",\n          onClick: {\n            handleMemeLikes,\n            handleUserLikes\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), ourMeme && ourMeme.likes ? ourMeme.likes : 0, /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-thumbs-down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this),\n      nonloggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"please login to like or comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MemeDetails, \"tZiRFxtrQ1/dNMT9sIhYgcND0fc=\", false, function () {\n  return [useParams];\n});\n\n_c = MemeDetails;\nexport default MemeDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeDetails\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js"],"names":["React","useEffect","useState","useParams","SecureContent","memeService","userService","authService","MemeDetails","meme","setMeme","ourMeme","setOurMeme","memeID","fetchMemeByID","response","fetchMemesFromAPI","data","memes","find","curMeme","id","fetchMemeByIDfromDatabase","fetchMemeById","handleMemeLikes","title","url","likeMeme","handleUserLikes","curUser","profile","console","log","name","likes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as authService from \"../services/auth-service.js\";\n\nconst MemeDetails = () => {\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const { memeID } = useParams();\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find((curMeme) => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeLikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    const response = await memeService.likeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleUserLikes = async () => {\n    const curUser = await authService.profile();\n    console.log(curUser.id);\n    await userService.likeMeme(curUser, meme.id);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    console.log(meme);\n  }, []);\n\n  return (\n    <div>\n      <h1>{meme.name}</h1>\n      <img src={meme.url} height={500} />\n      <SecureContent\n        loggedInContent={\n          <div>\n            {\" \"}\n            <i\n              className=\"fas fa-thumbs-up\"\n              onClick={{ handleMemeLikes, handleUserLikes }}\n            ></i>\n            {ourMeme && ourMeme.likes ? ourMeme.likes : 0}\n            <i className=\"fas fa-thumbs-down\"></i>\n          </div>\n        }\n        nonloggedInContent={<div>please login to like or comment</div>}\n      />\n    </div>\n  );\n};\n\nexport default MemeDetails;\n"]},"metadata":{},"sourceType":"module"}