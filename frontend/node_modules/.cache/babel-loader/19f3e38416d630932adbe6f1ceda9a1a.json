{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile-display.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileDisplay = userID => {\n  _s();\n\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n  const [likedMemes, setLikedMemes] = useState([]);\n  const [favMeme, setFavMeme] = useState();\n  const [comments, setComments] = useState([]);\n  const [commentedMemes, setCommentedMemes] = useState([]);\n\n  const logout = async () => {\n    await service.logout();\n    navigate(\"login\");\n  };\n\n  const checkUser = async () => {\n    const curUser = await userService.fetchUserById(userID);\n    setUser(curUser);\n  };\n\n  const loadLikedMemes = async memeID => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeArr = [];\n    curUser.data.likedMemes.map(async memeid => {\n      const curMeme = response.data.data.memes.find(curMeme => curMeme.id === memeid);\n\n      if (curMeme) {\n        return memeArr.push(curMeme);\n      }\n    });\n    setLikedMemes(memeArr);\n  };\n\n  const fetchFavMeme = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeID = curUser.data.favoriteMeme;\n    setFavMeme(response.data.data.memes.find(curMeme => curMeme.id === memeID));\n  };\n\n  const fetchCommentedMemes = async () => {\n    const response = await commentService.findCommentsByUserId(userID);\n    const updatedComments = [];\n    response.map(async curMeme => {\n      const curMemeFromApi = await memeService.fetchMemesFromAPI();\n      const existing = curMemeFromApi.data.data.memes.find(curMemeFromAPI => curMemeFromAPI.id === curMeme.memeID);\n\n      if (existing) {\n        updatedComments.push(curMeme);\n      }\n    });\n    console.log(response);\n    setComments(updatedComments);\n  };\n\n  useEffect(() => {\n    checkUser();\n    loadLikedMemes();\n    fetchFavMeme();\n    fetchCommentedMemes();\n  }, [setUser, setFavMeme, setComments, setCommentedMemes]);\n  return user ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Profile: \", user.data.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), favMeme && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Favorite Meme:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-display\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/meme-search/details/${favMeme.id}`,\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: favMeme.url,\n            height: 30,\n            className: \"me-2 meme-image-display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), favMeme.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), user.data.likedMemes.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Liked Memes:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-display liked-memes\",\n        children: likedMemes.map(meme => /*#__PURE__*/_jsxDEV(Link, {\n          to: `/meme-search/details/${meme.id}`,\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: meme.url,\n            height: 30,\n            className: \"me-2 meme-image-display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this), meme.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), comments.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Captions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-display captions\",\n        children: comments.map(comment => {\n          const data = /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item comment-item\",\n            children: [comment && comment.username, \" on\", \" \", /*#__PURE__*/_jsxDEV(Link, {\n              to: `/meme-search/details/${comment.memeID}`,\n              children: comment.memeName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this), \":\", /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"comment\",\n              children: comment && comment.comment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this);\n\n          return data;\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this) : \"\";\n};\n\n_s(ProfileDisplay, \"qoqZrTNuvOxp8bcvFZ0mhwvSoo8=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ProfileDisplay;\nexport default ProfileDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileDisplay\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile-display.js"],"names":["React","useRef","useEffect","useState","service","Link","useNavigate","useProfile","userService","memeService","commentService","ProfileDisplay","userID","navigate","user","setUser","likedMemes","setLikedMemes","favMeme","setFavMeme","comments","setComments","commentedMemes","setCommentedMemes","logout","checkUser","curUser","fetchUserById","loadLikedMemes","memeID","response","fetchMemesFromAPI","memeArr","data","map","memeid","curMeme","memes","find","id","push","fetchFavMeme","favoriteMeme","fetchCommentedMemes","findCommentsByUserId","updatedComments","curMemeFromApi","existing","curMemeFromAPI","console","log","username","url","name","length","meme","comment","memeName"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\n\nconst ProfileDisplay = (userID) => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n  const [likedMemes, setLikedMemes] = useState([]);\n  const [favMeme, setFavMeme] = useState();\n  const [comments, setComments] = useState([]);\n  const [commentedMemes, setCommentedMemes] = useState([]);\n\n  const logout = async () => {\n    await service.logout();\n    navigate(\"login\");\n  };\n\n  const checkUser = async () => {\n    const curUser = await userService.fetchUserById(userID);\n    setUser(curUser);\n  };\n\n  const loadLikedMemes = async (memeID) => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeArr = [];\n    curUser.data.likedMemes.map(async (memeid) => {\n      const curMeme = response.data.data.memes.find(\n        (curMeme) => curMeme.id === memeid\n      );\n      if (curMeme) {\n        return memeArr.push(curMeme);\n      }\n    });\n    setLikedMemes(memeArr);\n  };\n\n  const fetchFavMeme = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeID = curUser.data.favoriteMeme;\n    setFavMeme(\n      response.data.data.memes.find((curMeme) => curMeme.id === memeID)\n    );\n  };\n\n  const fetchCommentedMemes = async () => {\n    const response = await commentService.findCommentsByUserId(userID);\n    const updatedComments = [];\n    response.map(async (curMeme) => {\n      const curMemeFromApi = await memeService.fetchMemesFromAPI();\n      const existing = curMemeFromApi.data.data.memes.find(\n        (curMemeFromAPI) => curMemeFromAPI.id === curMeme.memeID\n      );\n      if (existing) {\n        updatedComments.push(curMeme);\n      }\n    });\n    console.log(response);\n    setComments(updatedComments);\n  };\n\n  useEffect(() => {\n    checkUser();\n    loadLikedMemes();\n    fetchFavMeme();\n    fetchCommentedMemes();\n  }, [setUser, setFavMeme, setComments, setCommentedMemes]);\n\n  return user ? (\n    <div className=\"wrapper\">\n      <h2>Profile: {user.data.username}</h2>\n      {favMeme && (\n        <div>\n          <hr />\n          <h5>Favorite Meme:</h5>\n          <div className=\"meme-display\">\n            <Link\n              to={`/meme-search/details/${favMeme.id}`}\n              className=\"list-group-item\"\n            >\n              <img\n                src={favMeme.url}\n                height={30}\n                className=\"me-2 meme-image-display\"\n              />\n              {favMeme.name}\n            </Link>\n          </div>\n        </div>\n      )}\n      {user.data.likedMemes.length !== 0 && (\n        <div>\n          <hr />\n          <h5>Liked Memes:</h5>\n          <div className=\"meme-display liked-memes\">\n            {likedMemes.map((meme) => (\n              <Link\n                to={`/meme-search/details/${meme.id}`}\n                className=\"list-group-item\"\n              >\n                <img\n                  src={meme.url}\n                  height={30}\n                  className=\"me-2 meme-image-display\"\n                />\n                {meme.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n      {comments.length !== 0 && (\n        <div>\n          <hr />\n          <h5>Captions:</h5>\n          <div className=\"meme-display captions\">\n            {comments.map((comment) => {\n              const data = (\n                <li className=\"list-group-item comment-item\">\n                  {comment && comment.username} on{\" \"}\n                  <Link to={`/meme-search/details/${comment.memeID}`}>\n                    {comment.memeName}\n                  </Link>\n                  :<p className=\"comment\">{comment && comment.comment}</p>\n                </li>\n              );\n              return data;\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default ProfileDisplay;\n"]},"metadata":{},"sourceType":"module"}