{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\n\nconst ProfileDisplay = userID => {\n  _s();\n\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n  const [likedMemes, setLikedMemes] = useState([]);\n  const [favMeme, setFavMeme] = useState();\n  const [comments, setComments] = useState([]);\n  const [commentedMemes, setCommentedMemes] = useState([]);\n\n  const logout = async () => {\n    await service.logout();\n    navigate(\"login\");\n  };\n\n  const checkUser = async () => {\n    const curUser = await userService.fetchUserById(userID);\n    setUser(curUser);\n  };\n\n  const loadLikedMemes = async memeID => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeArr = [];\n    curUser.data.likedMemes.map(async memeid => {\n      const curMeme = response.data.data.memes.find(curMeme => curMeme.id === memeid);\n\n      if (curMeme) {\n        return memeArr.push(curMeme);\n      }\n    });\n    setLikedMemes(memeArr);\n  };\n\n  const fetchFavMeme = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeID = curUser.data.favoriteMeme;\n    setFavMeme(response.data.data.memes.find(curMeme => curMeme.id === memeID));\n  };\n\n  const fetchCommentedMemes = async () => {\n    const response = await commentService.findCommentsByUserId(userID);\n    const updatedComments = [];\n    response.map(async curMeme => {\n      const curMemeFromApi = await memeService.fetchMemesFromAPI();\n      const existing = curMemeFromApi.data.data.memes.find(curMemeFromAPI => curMemeFromAPI.id === curMeme.memeID);\n\n      if (existing) {\n        updatedComments.push(curMeme);\n      }\n    });\n    console.log(response);\n    setComments(updatedComments);\n  };\n\n  useEffect(() => {\n    checkUser();\n    loadLikedMemes();\n    fetchFavMeme();\n    fetchCommentedMemes();\n  }, [setUser, setFavMeme, setComments, setCommentedMemes]);\n  return test;\n};\n\n_s(ProfileDisplay, \"qoqZrTNuvOxp8bcvFZ0mhwvSoo8=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ProfileDisplay;\nexport default ProfileDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileDisplay\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile-display.js"],"names":["React","useRef","useEffect","useState","service","Link","useNavigate","useProfile","userService","memeService","commentService","ProfileDisplay","userID","navigate","user","setUser","likedMemes","setLikedMemes","favMeme","setFavMeme","comments","setComments","commentedMemes","setCommentedMemes","logout","checkUser","curUser","fetchUserById","loadLikedMemes","memeID","response","fetchMemesFromAPI","memeArr","data","map","memeid","curMeme","memes","find","id","push","fetchFavMeme","favoriteMeme","fetchCommentedMemes","findCommentsByUserId","updatedComments","curMemeFromApi","existing","curMemeFromAPI","console","log","test"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,kBAAlC;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,OAAO,KAAKC,cAAZ,MAAgC,gCAAhC;;AAEA,MAAMC,cAAc,GAAIC,MAAD,IAAY;AAAA;;AACjC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,EAAhC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,EAAtC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMqB,MAAM,GAAG,YAAY;AACzB,UAAMpB,OAAO,CAACoB,MAAR,EAAN;AACAX,IAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,GAHD;;AAKA,QAAMY,SAAS,GAAG,YAAY;AAC5B,UAAMC,OAAO,GAAG,MAAMlB,WAAW,CAACmB,aAAZ,CAA0Bf,MAA1B,CAAtB;AACAG,IAAAA,OAAO,CAACW,OAAD,CAAP;AACD,GAHD;;AAKA,QAAME,cAAc,GAAG,MAAOC,MAAP,IAAkB;AACvC,UAAMC,QAAQ,GAAG,MAAMrB,WAAW,CAACsB,iBAAZ,EAAvB;AACA,UAAML,OAAO,GAAG,MAAMlB,WAAW,CAACmB,aAAZ,CAA0Bf,MAA1B,CAAtB;AACA,UAAMoB,OAAO,GAAG,EAAhB;AACAN,IAAAA,OAAO,CAACO,IAAR,CAAajB,UAAb,CAAwBkB,GAAxB,CAA4B,MAAOC,MAAP,IAAkB;AAC5C,YAAMC,OAAO,GAAGN,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBI,KAAnB,CAAyBC,IAAzB,CACbF,OAAD,IAAaA,OAAO,CAACG,EAAR,KAAeJ,MADd,CAAhB;;AAGA,UAAIC,OAAJ,EAAa;AACX,eAAOJ,OAAO,CAACQ,IAAR,CAAaJ,OAAb,CAAP;AACD;AACF,KAPD;AAQAnB,IAAAA,aAAa,CAACe,OAAD,CAAb;AACD,GAbD;;AAeA,QAAMS,YAAY,GAAG,YAAY;AAC/B,UAAMX,QAAQ,GAAG,MAAMrB,WAAW,CAACsB,iBAAZ,EAAvB;AACA,UAAML,OAAO,GAAG,MAAMlB,WAAW,CAACmB,aAAZ,CAA0Bf,MAA1B,CAAtB;AACA,UAAMiB,MAAM,GAAGH,OAAO,CAACO,IAAR,CAAaS,YAA5B;AACAvB,IAAAA,UAAU,CACRW,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBI,KAAnB,CAAyBC,IAAzB,CAA+BF,OAAD,IAAaA,OAAO,CAACG,EAAR,KAAeV,MAA1D,CADQ,CAAV;AAGD,GAPD;;AASA,QAAMc,mBAAmB,GAAG,YAAY;AACtC,UAAMb,QAAQ,GAAG,MAAMpB,cAAc,CAACkC,oBAAf,CAAoChC,MAApC,CAAvB;AACA,UAAMiC,eAAe,GAAG,EAAxB;AACAf,IAAAA,QAAQ,CAACI,GAAT,CAAa,MAAOE,OAAP,IAAmB;AAC9B,YAAMU,cAAc,GAAG,MAAMrC,WAAW,CAACsB,iBAAZ,EAA7B;AACA,YAAMgB,QAAQ,GAAGD,cAAc,CAACb,IAAf,CAAoBA,IAApB,CAAyBI,KAAzB,CAA+BC,IAA/B,CACdU,cAAD,IAAoBA,cAAc,CAACT,EAAf,KAAsBH,OAAO,CAACP,MADnC,CAAjB;;AAGA,UAAIkB,QAAJ,EAAc;AACZF,QAAAA,eAAe,CAACL,IAAhB,CAAqBJ,OAArB;AACD;AACF,KARD;AASAa,IAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAZ;AACAT,IAAAA,WAAW,CAACwB,eAAD,CAAX;AACD,GAdD;;AAgBA3C,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,SAAS;AACTG,IAAAA,cAAc;AACda,IAAAA,YAAY;AACZE,IAAAA,mBAAmB;AACpB,GALQ,EAKN,CAAC5B,OAAD,EAAUI,UAAV,EAAsBE,WAAtB,EAAmCE,iBAAnC,CALM,CAAT;AAOA,SAAO4B,IAAP;AACD,CAlED;;GAAMxC,c;UACaL,W;;;KADbK,c;AAoEN,eAAeA,cAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\n\nconst ProfileDisplay = (userID) => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n  const [likedMemes, setLikedMemes] = useState([]);\n  const [favMeme, setFavMeme] = useState();\n  const [comments, setComments] = useState([]);\n  const [commentedMemes, setCommentedMemes] = useState([]);\n\n  const logout = async () => {\n    await service.logout();\n    navigate(\"login\");\n  };\n\n  const checkUser = async () => {\n    const curUser = await userService.fetchUserById(userID);\n    setUser(curUser);\n  };\n\n  const loadLikedMemes = async (memeID) => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeArr = [];\n    curUser.data.likedMemes.map(async (memeid) => {\n      const curMeme = response.data.data.memes.find(\n        (curMeme) => curMeme.id === memeid\n      );\n      if (curMeme) {\n        return memeArr.push(curMeme);\n      }\n    });\n    setLikedMemes(memeArr);\n  };\n\n  const fetchFavMeme = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    const curUser = await userService.fetchUserById(userID);\n    const memeID = curUser.data.favoriteMeme;\n    setFavMeme(\n      response.data.data.memes.find((curMeme) => curMeme.id === memeID)\n    );\n  };\n\n  const fetchCommentedMemes = async () => {\n    const response = await commentService.findCommentsByUserId(userID);\n    const updatedComments = [];\n    response.map(async (curMeme) => {\n      const curMemeFromApi = await memeService.fetchMemesFromAPI();\n      const existing = curMemeFromApi.data.data.memes.find(\n        (curMemeFromAPI) => curMemeFromAPI.id === curMeme.memeID\n      );\n      if (existing) {\n        updatedComments.push(curMeme);\n      }\n    });\n    console.log(response);\n    setComments(updatedComments);\n  };\n\n  useEffect(() => {\n    checkUser();\n    loadLikedMemes();\n    fetchFavMeme();\n    fetchCommentedMemes();\n  }, [setUser, setFavMeme, setComments, setCommentedMemes]);\n\n  return test;\n};\n\nexport default ProfileDisplay;\n"]},"metadata":{},"sourceType":"module"}