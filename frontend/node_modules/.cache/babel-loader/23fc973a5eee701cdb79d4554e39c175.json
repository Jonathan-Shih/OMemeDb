{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemeDetails = () => {\n  _s();\n\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const [liked, setLiked] = useState();\n  const [disliked, setDisliked] = useState();\n  const [comments, setComments] = useState([]);\n  const {\n    memeID\n  } = useParams();\n  const {\n    checkLoggedIn\n  } = useProfile();\n  const commentRef = useRef();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find(curMeme => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const checkLiked = async () => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    const curLiked = curUser.data.likedMemes.includes(memeID);\n    setLiked(curLiked);\n    const curDisliked = curUser.data.dislikedMemes.includes(memeID);\n    setDisliked(curDisliked);\n  };\n\n  const handleUserActions = async action => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n\n    switch (action) {\n      case \"like\":\n        await userService.likeMeme(curUser.data, memeID);\n        break;\n\n      case \"unlike\":\n        await userService.unlikeMeme(curUser.data, memeID);\n        break;\n\n      case \"dislike\":\n        await userService.dislikeMeme(curUser.data, memeID);\n        break;\n\n      case \"undislike\":\n        await userService.undislikeMeme(curUser.data, memeID);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleMemeActions = async action => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url\n    };\n    let response;\n\n    switch (action) {\n      case \"like\":\n        response = await memeService.likeMeme(curMeme);\n        break;\n\n      case \"unlike\":\n        response = await memeService.unlikeMeme(curMeme);\n        break;\n\n      default:\n        return;\n    }\n\n    setOurMeme(response.data);\n  };\n\n  const handleComment = async () => {\n    const curSessionUser = await checkLoggedIn(); // const actualComment = await commentService.postComment(\n    //   curSessionUser._id,\n    //   meme.id,\n    //   {\n    //     comment: commentRef.current.value,\n    //     commenter: curSessionUser._id,\n    //     commenterUserName: curSessionUser.username,\n    //   }\n    // );\n\n    console.log(meme); // setComments([...comments, actualComment]);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    checkLiked();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: meme.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.url,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SecureContent, {\n      loggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `${liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"}`,\n          onClick: async () => {\n            if (liked) {\n              handleMemeActions(\"unlike\");\n              handleUserActions(\"unlike\");\n              setLiked(false);\n            } else if (!liked && disliked) {\n              await handleMemeActions(\"like\");\n              await handleUserActions(\"undislike\");\n              await handleMemeActions(\"like\");\n              await handleUserActions(\"like\");\n              setLiked(true);\n              setDisliked(false);\n            } else {\n              handleMemeActions(\"like\");\n              handleUserActions(\"like\");\n              setLiked(true);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), ourMeme && ourMeme.likes || 0, /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `${disliked ? \"fas fa-thumbs-down text-primary\" : \"fas fa-thumbs-down\"}`,\n          onClick: async () => {\n            if (disliked) {\n              handleMemeActions(\"like\");\n              handleUserActions(\"undislike\");\n              setDisliked(false);\n            } else if (liked && !disliked) {\n              await handleMemeActions(\"unlike\");\n              await handleUserActions(\"unlike\");\n              await handleMemeActions(\"unlike\");\n              await handleUserActions(\"dislike\");\n              setDisliked(true);\n              setLiked(false);\n            } else {\n              handleMemeActions(\"unlike\");\n              handleUserActions(\"dislike\");\n              setDisliked(true);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Leave a comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: commentRef,\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleComment,\n          className: \"btn btn-primary\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this),\n      nonloggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: `${liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), ourMeme && ourMeme.likes || 0, /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `${disliked ? \"fas fa-thumbs-down text-primary\" : \"fas fa-thumbs-down\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), \" \", \"please login to like or comment\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MemeDetails, \"aF73Yq33eMjDr9Fabih0ugVct/I=\", false, function () {\n  return [useParams, useProfile];\n});\n\n_c = MemeDetails;\nexport default MemeDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeDetails\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js"],"names":["React","useEffect","useState","useRef","useParams","SecureContent","memeService","userService","commentService","useProfile","MemeDetails","meme","setMeme","ourMeme","setOurMeme","liked","setLiked","disliked","setDisliked","comments","setComments","memeID","checkLoggedIn","commentRef","fetchMemeByID","response","fetchMemesFromAPI","data","memes","find","curMeme","id","fetchMemeByIDfromDatabase","fetchMemeById","checkLiked","curSessionUser","curUser","fetchUserById","_id","curLiked","likedMemes","includes","curDisliked","dislikedMemes","handleUserActions","action","likeMeme","unlikeMeme","dislikeMeme","undislikeMeme","handleMemeActions","name","url","handleComment","console","log","likes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\nimport { useProfile } from \"../contexts/profile-context.js\";\n\nconst MemeDetails = () => {\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const [liked, setLiked] = useState();\n  const [disliked, setDisliked] = useState();\n  const [comments, setComments] = useState([]);\n  const { memeID } = useParams();\n  const { checkLoggedIn } = useProfile();\n  const commentRef = useRef();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find((curMeme) => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const checkLiked = async () => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    const curLiked = curUser.data.likedMemes.includes(memeID);\n    setLiked(curLiked);\n    const curDisliked = curUser.data.dislikedMemes.includes(memeID);\n    setDisliked(curDisliked);\n  };\n\n  const handleUserActions = async (action) => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    switch (action) {\n      case \"like\":\n        await userService.likeMeme(curUser.data, memeID);\n        break;\n      case \"unlike\":\n        await userService.unlikeMeme(curUser.data, memeID);\n        break;\n      case \"dislike\":\n        await userService.dislikeMeme(curUser.data, memeID);\n        break;\n      case \"undislike\":\n        await userService.undislikeMeme(curUser.data, memeID);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleMemeActions = async (action) => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    let response;\n    switch (action) {\n      case \"like\":\n        response = await memeService.likeMeme(curMeme);\n        break;\n      case \"unlike\":\n        response = await memeService.unlikeMeme(curMeme);\n        break;\n      default:\n        return;\n    }\n    setOurMeme(response.data);\n  };\n\n  const handleComment = async () => {\n    const curSessionUser = await checkLoggedIn();\n    // const actualComment = await commentService.postComment(\n    //   curSessionUser._id,\n    //   meme.id,\n    //   {\n    //     comment: commentRef.current.value,\n    //     commenter: curSessionUser._id,\n    //     commenterUserName: curSessionUser.username,\n    //   }\n    // );\n    console.log(meme);\n    // setComments([...comments, actualComment]);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    checkLiked();\n  }, []);\n\n  return (\n    <div>\n      <h1>{meme.name}</h1>\n      <img src={meme.url} height={500} />\n      <SecureContent\n        loggedInContent={\n          <div>\n            {\" \"}\n            <i\n              className={`${\n                liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"\n              }`}\n              onClick={async () => {\n                if (liked) {\n                  handleMemeActions(\"unlike\");\n                  handleUserActions(\"unlike\");\n                  setLiked(false);\n                } else if (!liked && disliked) {\n                  await handleMemeActions(\"like\");\n                  await handleUserActions(\"undislike\");\n                  await handleMemeActions(\"like\");\n                  await handleUserActions(\"like\");\n                  setLiked(true);\n                  setDisliked(false);\n                } else {\n                  handleMemeActions(\"like\");\n                  handleUserActions(\"like\");\n                  setLiked(true);\n                }\n              }}\n            ></i>\n            {(ourMeme && ourMeme.likes) || 0}\n            <i\n              className={`${\n                disliked\n                  ? \"fas fa-thumbs-down text-primary\"\n                  : \"fas fa-thumbs-down\"\n              }`}\n              onClick={async () => {\n                if (disliked) {\n                  handleMemeActions(\"like\");\n                  handleUserActions(\"undislike\");\n                  setDisliked(false);\n                } else if (liked && !disliked) {\n                  await handleMemeActions(\"unlike\");\n                  await handleUserActions(\"unlike\");\n                  await handleMemeActions(\"unlike\");\n                  await handleUserActions(\"dislike\");\n                  setDisliked(true);\n                  setLiked(false);\n                } else {\n                  handleMemeActions(\"unlike\");\n                  handleUserActions(\"dislike\");\n                  setDisliked(true);\n                }\n              }}\n            ></i>\n            <h2>Leave a comment</h2>\n            <textarea ref={commentRef} className=\"form-control\"></textarea>\n            <button onClick={handleComment} className=\"btn btn-primary\">\n              Post\n            </button>\n          </div>\n        }\n        nonloggedInContent={\n          <div>\n            <i\n              className={`${\n                liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"\n              }`}\n            ></i>\n            {(ourMeme && ourMeme.likes) || 0}\n            <i\n              className={`${\n                disliked\n                  ? \"fas fa-thumbs-down text-primary\"\n                  : \"fas fa-thumbs-down\"\n              }`}\n            ></i>{\" \"}\n            please login to like or comment\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default MemeDetails;\n"]},"metadata":{},"sourceType":"module"}