{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as authService from \"../services/auth-service.js\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemeDetails = () => {\n  _s();\n\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const [liked, setLiked] = useState();\n  const [disliked, setDisliked] = useState();\n  const {\n    memeID\n  } = useParams();\n  const {\n    checkLoggedIn\n  } = useProfile();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find(curMeme => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const checkLiked = async () => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    const curLiked = curUser.data.likedMemes.includes(memeID);\n    setLiked(curLiked);\n    const curDisliked = curUser.data.dislikedMemes.includes(memeID);\n    setDisliked(curDisliked);\n  };\n\n  const handleUserActions = async action => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    let updatedcurUser;\n\n    switch (action) {\n      case \"like\":\n        await userService.likeMeme(curUser.data, memeID);\n        break;\n\n      case \"unlike\":\n        await userService.unlikeMeme(curUser.data, memeID);\n        break;\n\n      case \"dislike\":\n        await userService.dislikeMeme(curUser.data, memeID);\n        break;\n\n      case \"undislike\":\n        await userService.undislikeMeme(curUser.data, memeID);\n        break;\n\n      case \"unlikeDislike\":\n        await userService.unlikeMeme(curUser.data, memeID);\n        updatedcurUser = await userService.fetchUserById(curSessionUser._id);\n        await userService.dislikeMeme(updatedcurUser.data, memeID);\n        break;\n\n      case \"undislikeLike\":\n        await userService.undislikeMeme(curUser.data, memeID);\n        updatedcurUser = await userService.fetchUserById(curSessionUser._id);\n        await userService.likeMeme(updatedcurUser.data, memeID);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleMemeActions = async action => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url\n    };\n    let response;\n\n    switch (action) {\n      case \"like\":\n        response = await memeService.likeMeme(curMeme);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleMemeLikes = async () => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url\n    };\n    const response = await memeService.likeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeUnlikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url\n    };\n    const response = await memeService.unlikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeUnlikeDislikes = async () => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url\n    };\n    const response = await memeService.unlikeDislikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeUndislikeLikess = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url\n    };\n    const response = await memeService.unDislikeLikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    checkLiked();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: meme.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.url,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SecureContent, {\n      loggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `${liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"}`,\n          onClick: () => {\n            if (liked) {\n              handleMemeUnlikes();\n              handleUserActions(\"unlike\");\n              setLiked(false);\n            } else if (!liked && disliked) {\n              handleMemeUndislikeLikess();\n              handleUserActions(\"undislikeLike\");\n              setLiked(true);\n              setDisliked(false);\n            } else {\n              handleMemeLikes();\n              handleUserActions(\"like\");\n              setLiked(true);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), ourMeme && ourMeme.likes || 0, /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `${disliked ? \"fas fa-thumbs-down text-primary\" : \"fas fa-thumbs-down\"}`,\n          onClick: () => {\n            if (disliked) {\n              handleMemeLikes();\n              handleUserActions(\"undislike\");\n              setDisliked(false);\n            } else if (liked && !disliked) {\n              handleMemeUnlikeDislikes();\n              handleUserActions(\"unlikeDislike\");\n              setDisliked(true);\n              setLiked(false);\n            } else {\n              handleMemeUnlikes();\n              handleUserActions(\"dislike\");\n              setDisliked(true);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this),\n      nonloggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"please login to like or comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MemeDetails, \"4N18X4Fxp/mJonTltiBtpQaTmf4=\", false, function () {\n  return [useParams, useProfile];\n});\n\n_c = MemeDetails;\nexport default MemeDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeDetails\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js"],"names":["React","useEffect","useState","useParams","SecureContent","memeService","userService","authService","useProfile","MemeDetails","meme","setMeme","ourMeme","setOurMeme","liked","setLiked","disliked","setDisliked","memeID","checkLoggedIn","fetchMemeByID","response","fetchMemesFromAPI","data","memes","find","curMeme","id","fetchMemeByIDfromDatabase","fetchMemeById","checkLiked","curSessionUser","curUser","fetchUserById","_id","curLiked","likedMemes","includes","curDisliked","dislikedMemes","handleUserActions","action","updatedcurUser","likeMeme","unlikeMeme","dislikeMeme","undislikeMeme","handleMemeActions","name","url","handleMemeLikes","handleMemeUnlikes","title","handleMemeUnlikeDislikes","unlikeDislikeMeme","handleMemeUndislikeLikess","unDislikeLikeMeme","likes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,SAASC,UAAT,QAA2B,gCAA3B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,EAAlC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,EAAxC;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAaf,SAAS,EAA5B;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAoBX,UAAU,EAApC;;AAEA,QAAMY,aAAa,GAAG,YAAY;AAChC,UAAMC,QAAQ,GAAG,MAAMhB,WAAW,CAACiB,iBAAZ,EAAvB;AACAX,IAAAA,OAAO,CAACU,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA+BC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeT,MAA1D,CAAD,CAAP;AACD,GAHD;;AAKA,QAAMU,yBAAyB,GAAG,YAAY;AAC5C,UAAMP,QAAQ,GAAG,MAAMhB,WAAW,CAACwB,aAAZ,CAA0BX,MAA1B,CAAvB;AACAL,IAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACD,GAHD;;AAKA,QAAMO,UAAU,GAAG,YAAY;AAC7B,UAAMC,cAAc,GAAG,MAAMZ,aAAa,EAA1C;AACA,UAAMa,OAAO,GAAG,MAAM1B,WAAW,CAAC2B,aAAZ,CAA0BF,cAAc,CAACG,GAAzC,CAAtB;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACT,IAAR,CAAaa,UAAb,CAAwBC,QAAxB,CAAiCnB,MAAjC,CAAjB;AACAH,IAAAA,QAAQ,CAACoB,QAAD,CAAR;AACA,UAAMG,WAAW,GAAGN,OAAO,CAACT,IAAR,CAAagB,aAAb,CAA2BF,QAA3B,CAAoCnB,MAApC,CAApB;AACAD,IAAAA,WAAW,CAACqB,WAAD,CAAX;AACD,GAPD;;AASA,QAAME,iBAAiB,GAAG,MAAOC,MAAP,IAAkB;AAC1C,UAAMV,cAAc,GAAG,MAAMZ,aAAa,EAA1C;AACA,UAAMa,OAAO,GAAG,MAAM1B,WAAW,CAAC2B,aAAZ,CAA0BF,cAAc,CAACG,GAAzC,CAAtB;AACA,QAAIQ,cAAJ;;AACA,YAAQD,MAAR;AACE,WAAK,MAAL;AACE,cAAMnC,WAAW,CAACqC,QAAZ,CAAqBX,OAAO,CAACT,IAA7B,EAAmCL,MAAnC,CAAN;AACA;;AACF,WAAK,QAAL;AACE,cAAMZ,WAAW,CAACsC,UAAZ,CAAuBZ,OAAO,CAACT,IAA/B,EAAqCL,MAArC,CAAN;AACA;;AACF,WAAK,SAAL;AACE,cAAMZ,WAAW,CAACuC,WAAZ,CAAwBb,OAAO,CAACT,IAAhC,EAAsCL,MAAtC,CAAN;AACA;;AACF,WAAK,WAAL;AACE,cAAMZ,WAAW,CAACwC,aAAZ,CAA0Bd,OAAO,CAACT,IAAlC,EAAwCL,MAAxC,CAAN;AACA;;AACF,WAAK,eAAL;AACE,cAAMZ,WAAW,CAACsC,UAAZ,CAAuBZ,OAAO,CAACT,IAA/B,EAAqCL,MAArC,CAAN;AACAwB,QAAAA,cAAc,GAAG,MAAMpC,WAAW,CAAC2B,aAAZ,CAA0BF,cAAc,CAACG,GAAzC,CAAvB;AACA,cAAM5B,WAAW,CAACuC,WAAZ,CAAwBH,cAAc,CAACnB,IAAvC,EAA6CL,MAA7C,CAAN;AACA;;AACF,WAAK,eAAL;AACE,cAAMZ,WAAW,CAACwC,aAAZ,CAA0Bd,OAAO,CAACT,IAAlC,EAAwCL,MAAxC,CAAN;AACAwB,QAAAA,cAAc,GAAG,MAAMpC,WAAW,CAAC2B,aAAZ,CAA0BF,cAAc,CAACG,GAAzC,CAAvB;AACA,cAAM5B,WAAW,CAACqC,QAAZ,CAAqBD,cAAc,CAACnB,IAApC,EAA0CL,MAA1C,CAAN;AACA;;AACF;AACE;AAxBJ;AA0BD,GA9BD;;AAgCA,QAAM6B,iBAAiB,GAAG,MAAON,MAAP,IAAkB;AAC1C,UAAMf,OAAO,GAAG;AACdsB,MAAAA,IAAI,EAAEtC,IAAI,CAACsC,IADG;AAEd9B,MAAAA,MAAM,EAAER,IAAI,CAACiB,EAFC;AAGdsB,MAAAA,GAAG,EAAEvC,IAAI,CAACuC;AAHI,KAAhB;AAKA,QAAI5B,QAAJ;;AACA,YAAQoB,MAAR;AACE,WAAK,MAAL;AACEpB,QAAAA,QAAQ,GAAG,MAAMhB,WAAW,CAACsC,QAAZ,CAAqBjB,OAArB,CAAjB;AACA;;AACF;AACE;AALJ;AAOD,GAdD;;AAeA,QAAMwB,eAAe,GAAG,YAAY;AAClC,UAAMxB,OAAO,GAAG;AACdsB,MAAAA,IAAI,EAAEtC,IAAI,CAACsC,IADG;AAEd9B,MAAAA,MAAM,EAAER,IAAI,CAACiB,EAFC;AAGdsB,MAAAA,GAAG,EAAEvC,IAAI,CAACuC;AAHI,KAAhB;AAKA,UAAM5B,QAAQ,GAAG,MAAMhB,WAAW,CAACsC,QAAZ,CAAqBjB,OAArB,CAAvB;AACAb,IAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACD,GARD;;AAUA,QAAM4B,iBAAiB,GAAG,YAAY;AACpC,UAAMzB,OAAO,GAAG;AACd0B,MAAAA,KAAK,EAAE1C,IAAI,CAAC0C,KADE;AAEdlC,MAAAA,MAAM,EAAER,IAAI,CAACiB,EAFC;AAGdsB,MAAAA,GAAG,EAAEvC,IAAI,CAACuC;AAHI,KAAhB;AAKA,UAAM5B,QAAQ,GAAG,MAAMhB,WAAW,CAACuC,UAAZ,CAAuBlB,OAAvB,CAAvB;AACAb,IAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACD,GARD;;AAUA,QAAM8B,wBAAwB,GAAG,YAAY;AAC3C,UAAM3B,OAAO,GAAG;AACdsB,MAAAA,IAAI,EAAEtC,IAAI,CAACsC,IADG;AAEd9B,MAAAA,MAAM,EAAER,IAAI,CAACiB,EAFC;AAGdsB,MAAAA,GAAG,EAAEvC,IAAI,CAACuC;AAHI,KAAhB;AAKA,UAAM5B,QAAQ,GAAG,MAAMhB,WAAW,CAACiD,iBAAZ,CAA8B5B,OAA9B,CAAvB;AACAb,IAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACD,GARD;;AAUA,QAAMgC,yBAAyB,GAAG,YAAY;AAC5C,UAAM7B,OAAO,GAAG;AACd0B,MAAAA,KAAK,EAAE1C,IAAI,CAAC0C,KADE;AAEdlC,MAAAA,MAAM,EAAER,IAAI,CAACiB,EAFC;AAGdsB,MAAAA,GAAG,EAAEvC,IAAI,CAACuC;AAHI,KAAhB;AAKA,UAAM5B,QAAQ,GAAG,MAAMhB,WAAW,CAACmD,iBAAZ,CAA8B9B,OAA9B,CAAvB;AACAb,IAAAA,UAAU,CAACQ,QAAQ,CAACE,IAAV,CAAV;AACD,GARD;;AAUAtB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,aAAa;AACbQ,IAAAA,yBAAyB;AACzBE,IAAAA,UAAU;AACX,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE;AAAA,4BACE;AAAA,gBAAKpB,IAAI,CAACsC;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,GAAG,EAAEtC,IAAI,CAACuC,GAAf;AAAoB,MAAA,MAAM,EAAE;AAA5B;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,aAAD;AACE,MAAA,eAAe,eACb;AAAA,mBACG,GADH,eAEE;AACE,UAAA,SAAS,EAAG,GACVnC,KAAK,GAAG,8BAAH,GAAoC,kBAC1C,EAHH;AAIE,UAAA,OAAO,EAAE,MAAM;AACb,gBAAIA,KAAJ,EAAW;AACTqC,cAAAA,iBAAiB;AACjBX,cAAAA,iBAAiB,CAAC,QAAD,CAAjB;AACAzB,cAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,aAJD,MAIO,IAAI,CAACD,KAAD,IAAUE,QAAd,EAAwB;AAC7BuC,cAAAA,yBAAyB;AACzBf,cAAAA,iBAAiB,CAAC,eAAD,CAAjB;AACAzB,cAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,cAAAA,WAAW,CAAC,KAAD,CAAX;AACD,aALM,MAKA;AACLiC,cAAAA,eAAe;AACfV,cAAAA,iBAAiB,CAAC,MAAD,CAAjB;AACAzB,cAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF;AAnBH;AAAA;AAAA;AAAA;AAAA,gBAFF,EAuBIH,OAAO,IAAIA,OAAO,CAAC6C,KAApB,IAA8B,CAvBjC,eAwBE;AACE,UAAA,SAAS,EAAG,GACVzC,QAAQ,GACJ,iCADI,GAEJ,oBACL,EALH;AAME,UAAA,OAAO,EAAE,MAAM;AACb,gBAAIA,QAAJ,EAAc;AACZkC,cAAAA,eAAe;AACfV,cAAAA,iBAAiB,CAAC,WAAD,CAAjB;AACAvB,cAAAA,WAAW,CAAC,KAAD,CAAX;AACD,aAJD,MAIO,IAAIH,KAAK,IAAI,CAACE,QAAd,EAAwB;AAC7BqC,cAAAA,wBAAwB;AACxBb,cAAAA,iBAAiB,CAAC,eAAD,CAAjB;AACAvB,cAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,cAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,aALM,MAKA;AACLoC,cAAAA,iBAAiB;AACjBX,cAAAA,iBAAiB,CAAC,SAAD,CAAjB;AACAvB,cAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF;AArBH;AAAA;AAAA;AAAA;AAAA,gBAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAmDE,MAAA,kBAAkB,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnDtB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2DD,CAnLD;;GAAMR,W;UAKeN,S,EACOK,U;;;KANtBC,W;AAqLN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as authService from \"../services/auth-service.js\";\nimport { useProfile } from \"../contexts/profile-context.js\";\n\nconst MemeDetails = () => {\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const [liked, setLiked] = useState();\n  const [disliked, setDisliked] = useState();\n  const { memeID } = useParams();\n  const { checkLoggedIn } = useProfile();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find((curMeme) => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const checkLiked = async () => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    const curLiked = curUser.data.likedMemes.includes(memeID);\n    setLiked(curLiked);\n    const curDisliked = curUser.data.dislikedMemes.includes(memeID);\n    setDisliked(curDisliked);\n  };\n\n  const handleUserActions = async (action) => {\n    const curSessionUser = await checkLoggedIn();\n    const curUser = await userService.fetchUserById(curSessionUser._id);\n    let updatedcurUser;\n    switch (action) {\n      case \"like\":\n        await userService.likeMeme(curUser.data, memeID);\n        break;\n      case \"unlike\":\n        await userService.unlikeMeme(curUser.data, memeID);\n        break;\n      case \"dislike\":\n        await userService.dislikeMeme(curUser.data, memeID);\n        break;\n      case \"undislike\":\n        await userService.undislikeMeme(curUser.data, memeID);\n        break;\n      case \"unlikeDislike\":\n        await userService.unlikeMeme(curUser.data, memeID);\n        updatedcurUser = await userService.fetchUserById(curSessionUser._id);\n        await userService.dislikeMeme(updatedcurUser.data, memeID);\n        break;\n      case \"undislikeLike\":\n        await userService.undislikeMeme(curUser.data, memeID);\n        updatedcurUser = await userService.fetchUserById(curSessionUser._id);\n        await userService.likeMeme(updatedcurUser.data, memeID);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleMemeActions = async (action) => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    let response;\n    switch (action) {\n      case \"like\":\n        response = await memeService.likeMeme(curMeme);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleMemeLikes = async () => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    const response = await memeService.likeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeUnlikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    const response = await memeService.unlikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeUnlikeDislikes = async () => {\n    const curMeme = {\n      name: meme.name,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    const response = await memeService.unlikeDislikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleMemeUndislikeLikess = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    const response = await memeService.unDislikeLikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    checkLiked();\n  }, []);\n\n  return (\n    <div>\n      <h1>{meme.name}</h1>\n      <img src={meme.url} height={500} />\n      <SecureContent\n        loggedInContent={\n          <div>\n            {\" \"}\n            <i\n              className={`${\n                liked ? \"fas fa-thumbs-up text-danger\" : \"fas fa-thumbs-up\"\n              }`}\n              onClick={() => {\n                if (liked) {\n                  handleMemeUnlikes();\n                  handleUserActions(\"unlike\");\n                  setLiked(false);\n                } else if (!liked && disliked) {\n                  handleMemeUndislikeLikess();\n                  handleUserActions(\"undislikeLike\");\n                  setLiked(true);\n                  setDisliked(false);\n                } else {\n                  handleMemeLikes();\n                  handleUserActions(\"like\");\n                  setLiked(true);\n                }\n              }}\n            ></i>\n            {(ourMeme && ourMeme.likes) || 0}\n            <i\n              className={`${\n                disliked\n                  ? \"fas fa-thumbs-down text-primary\"\n                  : \"fas fa-thumbs-down\"\n              }`}\n              onClick={() => {\n                if (disliked) {\n                  handleMemeLikes();\n                  handleUserActions(\"undislike\");\n                  setDisliked(false);\n                } else if (liked && !disliked) {\n                  handleMemeUnlikeDislikes();\n                  handleUserActions(\"unlikeDislike\");\n                  setDisliked(true);\n                  setLiked(false);\n                } else {\n                  handleMemeUnlikes();\n                  handleUserActions(\"dislike\");\n                  setDisliked(true);\n                }\n              }}\n            ></i>\n          </div>\n        }\n        nonloggedInContent={<div>please login to like or comment</div>}\n      />\n    </div>\n  );\n};\n\nexport default MemeDetails;\n"]},"metadata":{},"sourceType":"module"}