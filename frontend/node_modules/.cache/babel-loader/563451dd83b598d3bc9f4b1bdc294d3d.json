{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile-display.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileDisplay = userID => {\n  _s();\n\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n  const [likedMemes, setLikedMemes] = useState([]);\n  const [favMeme, setFavMeme] = useState();\n  const [comments, setComments] = useState([]);\n  const [commentedMemes, setCommentedMemes] = useState([]); // const checkUser = async () => {\n  //   const curUser = await userService.fetchUserById(userID);\n  //   setUser(curUser);\n  // };\n  // const loadLikedMemes = async () => {\n  //   const response = await memeService.fetchMemesFromAPI();\n  //   const curUser = await userService.fetchUserById(userID);\n  //   const memeArr = [];\n  //   curUser.data.likedMemes.map(async (memeid) => {\n  //     const curMeme = response.data.data.memes.find(\n  //       (curMeme) => curMeme.id === memeid\n  //     );\n  //     if (curMeme) {\n  //       return memeArr.push(curMeme);\n  //     }\n  //   });\n  //   setLikedMemes(memeArr);\n  // };\n  // const fetchFavMeme = async () => {\n  //   const response = await memeService.fetchMemesFromAPI();\n  //   const curUser = await userService.fetchUserById(userID);\n  //   const memeID = curUser.data.favoriteMeme;\n  //   setFavMeme(\n  //     response.data.data.memes.find((curMeme) => curMeme.id === memeID)\n  //   );\n  // };\n  // const fetchCommentedMemes = async () => {\n  //   const response = await commentService.findCommentsByUserId(userID);\n  //   const updatedComments = [];\n  //   response.map(async (curMeme) => {\n  //     const curMemeFromApi = await memeService.fetchMemesFromAPI();\n  //     const existing = curMemeFromApi.data.data.memes.find(\n  //       (curMemeFromAPI) => curMemeFromAPI.id === curMeme.memeID\n  //     );\n  //     if (existing) {\n  //       updatedComments.push(curMeme);\n  //     }\n  //   });\n  //   console.log(response);\n  //   setComments(updatedComments);\n  // };\n\n  useEffect(() => {// checkUser();\n    // loadLikedMemes();\n    // fetchFavMeme();\n    // fetchCommentedMemes();\n  }, [setUser, setFavMeme, setComments, setCommentedMemes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileDisplay, \"qoqZrTNuvOxp8bcvFZ0mhwvSoo8=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ProfileDisplay;\nexport default ProfileDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileDisplay\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/components/screens/profile-display.js"],"names":["React","useRef","useEffect","useState","service","Link","useNavigate","userService","memeService","commentService","ProfileDisplay","userID","navigate","user","setUser","likedMemes","setLikedMemes","favMeme","setFavMeme","comments","setComments","commentedMemes","setCommentedMemes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,KAAKC,OAAZ,MAAyB,0BAAzB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,kBAAlC;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,OAAO,KAAKC,cAAZ,MAAgC,gCAAhC;;;AAEA,MAAMC,cAAc,GAAIC,MAAD,IAAY;AAAA;;AACjC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,EAAtC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,EAAD,CAApD,CANiC,CAQjC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAM,CACd;AACA;AACA;AACA;AACD,GALQ,EAKN,CAACY,OAAD,EAAUI,UAAV,EAAsBE,WAAtB,EAAmCE,iBAAnC,CALM,CAAT;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiED,CA7HD;;GAAMZ,c;UACaJ,W;;;KADbI,c;AA+HN,eAAeA,cAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport * as service from \"../services/auth-service\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport * as userService from \"../services/user-service.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as commentService from \"../services/comment-service.js\";\n\nconst ProfileDisplay = (userID) => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState();\n  const [likedMemes, setLikedMemes] = useState([]);\n  const [favMeme, setFavMeme] = useState();\n  const [comments, setComments] = useState([]);\n  const [commentedMemes, setCommentedMemes] = useState([]);\n\n  // const checkUser = async () => {\n  //   const curUser = await userService.fetchUserById(userID);\n  //   setUser(curUser);\n  // };\n\n  // const loadLikedMemes = async () => {\n  //   const response = await memeService.fetchMemesFromAPI();\n  //   const curUser = await userService.fetchUserById(userID);\n  //   const memeArr = [];\n  //   curUser.data.likedMemes.map(async (memeid) => {\n  //     const curMeme = response.data.data.memes.find(\n  //       (curMeme) => curMeme.id === memeid\n  //     );\n  //     if (curMeme) {\n  //       return memeArr.push(curMeme);\n  //     }\n  //   });\n  //   setLikedMemes(memeArr);\n  // };\n\n  // const fetchFavMeme = async () => {\n  //   const response = await memeService.fetchMemesFromAPI();\n  //   const curUser = await userService.fetchUserById(userID);\n  //   const memeID = curUser.data.favoriteMeme;\n  //   setFavMeme(\n  //     response.data.data.memes.find((curMeme) => curMeme.id === memeID)\n  //   );\n  // };\n\n  // const fetchCommentedMemes = async () => {\n  //   const response = await commentService.findCommentsByUserId(userID);\n  //   const updatedComments = [];\n  //   response.map(async (curMeme) => {\n  //     const curMemeFromApi = await memeService.fetchMemesFromAPI();\n  //     const existing = curMemeFromApi.data.data.memes.find(\n  //       (curMemeFromAPI) => curMemeFromAPI.id === curMeme.memeID\n  //     );\n  //     if (existing) {\n  //       updatedComments.push(curMeme);\n  //     }\n  //   });\n  //   console.log(response);\n  //   setComments(updatedComments);\n  // };\n\n  useEffect(() => {\n    // checkUser();\n    // loadLikedMemes();\n    // fetchFavMeme();\n    // fetchCommentedMemes();\n  }, [setUser, setFavMeme, setComments, setCommentedMemes]);\n\n  return (\n    <div>\n      test\n      {/* {favMeme && (\n        <div>\n          <hr />\n          <h5>Favorite Meme:</h5>\n          <div className=\"meme-display\">\n            <Link\n              to={`/meme-search/details/${favMeme.id}`}\n              className=\"list-group-item\"\n            >\n              <img\n                src={favMeme.url}\n                height={30}\n                className=\"me-2 meme-image-display\"\n              />\n              {favMeme.name}\n            </Link>\n          </div>\n        </div>\n      )}\n      {user.data.likedMemes.length !== 0 && (\n        <div>\n          <hr />\n          <h5>Liked Memes:</h5>\n          <div className=\"meme-display liked-memes\">\n            {likedMemes.map((meme) => (\n              <Link\n                to={`/meme-search/details/${meme.id}`}\n                className=\"list-group-item\"\n              >\n                <img\n                  src={meme.url}\n                  height={30}\n                  className=\"me-2 meme-image-display\"\n                />\n                {meme.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n      {comments.length !== 0 && (\n        <div>\n          <hr />\n          <h5>Captions:</h5>\n          <div className=\"meme-display captions\">\n            {comments.map((comment) => {\n              const data = (\n                <li className=\"list-group-item comment-item\">\n                  {comment && comment.username} on{\" \"}\n                  <Link to={`/meme-search/details/${comment.memeID}`}>\n                    {comment.memeName}\n                  </Link>\n                  :<p className=\"comment\">{comment && comment.comment}</p>\n                </li>\n              );\n              return data;\n            })}\n          </div>\n        </div>\n      )} */}\n    </div>\n  );\n};\n\nexport default ProfileDisplay;\n"]},"metadata":{},"sourceType":"module"}