{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as authService from \"../services/auth-service.js\";\nimport { useProfile } from \"../contexts/profile-context.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemeDetails = () => {\n  _s();\n\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const [liked, setLiked] = useState();\n  const {\n    memeID\n  } = useParams();\n  const {\n    checkLoggedIn\n  } = useProfile();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find(curMeme => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const checkLiked = async () => {\n    const curUser = await checkLoggedIn();\n    setLiked(curUser.likedMemes.includes(memeID));\n    console.log(curUser.likedMemes.includes(memeID));\n  };\n\n  const handleMemeLikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url\n    };\n    const response = await memeService.likeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleUserLikes = async () => {\n    const curUser = await checkLoggedIn();\n    await userService.likeMeme(curUser, memeID);\n  };\n\n  const handleMemeUnlikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url\n    };\n    const response = await memeService.unlikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleUserUnlikes = async () => {\n    const curUser = await checkLoggedIn();\n    await userService.unlikeMeme(curUser, memeID);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    checkLiked();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: meme.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.url,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SecureContent, {\n      loggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-thumbs-up\",\n          onClick: () => {\n            if (liked) {\n              handleMemeUnlikes();\n              handleUserUnlikes();\n              setLiked(false);\n            } else {\n              handleMemeLikes();\n              handleUserLikes();\n              setLiked(true);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), ourMeme && ourMeme.likes, /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-thumbs-down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this),\n      nonloggedInContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"please login to like or comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MemeDetails, \"j9OMnfggbu54zMVj6nQeH6NIFyM=\", false, function () {\n  return [useParams, useProfile];\n});\n\n_c = MemeDetails;\nexport default MemeDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemeDetails\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-details.js"],"names":["React","useEffect","useState","useParams","SecureContent","memeService","userService","authService","useProfile","MemeDetails","meme","setMeme","ourMeme","setOurMeme","liked","setLiked","memeID","checkLoggedIn","fetchMemeByID","response","fetchMemesFromAPI","data","memes","find","curMeme","id","fetchMemeByIDfromDatabase","fetchMemeById","checkLiked","curUser","likedMemes","includes","console","log","handleMemeLikes","title","url","likeMeme","handleUserLikes","handleMemeUnlikes","unlikeMeme","handleUserUnlikes","name","likes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport SecureContent from \"../contexts/secure-context.js\";\nimport * as memeService from \"../services/meme-service.js\";\nimport * as userService from \"../services/user-service.js\";\nimport * as authService from \"../services/auth-service.js\";\nimport { useProfile } from \"../contexts/profile-context.js\";\n\nconst MemeDetails = () => {\n  const [meme, setMeme] = useState({});\n  const [ourMeme, setOurMeme] = useState({});\n  const [liked, setLiked] = useState();\n  const { memeID } = useParams();\n  const { checkLoggedIn } = useProfile();\n\n  const fetchMemeByID = async () => {\n    const response = await memeService.fetchMemesFromAPI();\n    setMeme(response.data.data.memes.find((curMeme) => curMeme.id === memeID));\n  };\n\n  const fetchMemeByIDfromDatabase = async () => {\n    const response = await memeService.fetchMemeById(memeID);\n    setOurMeme(response.data);\n  };\n\n  const checkLiked = async () => {\n    const curUser = await checkLoggedIn();\n    setLiked(curUser.likedMemes.includes(memeID));\n    console.log(curUser.likedMemes.includes(memeID));\n  };\n\n  const handleMemeLikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    const response = await memeService.likeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleUserLikes = async () => {\n    const curUser = await checkLoggedIn();\n    await userService.likeMeme(curUser, memeID);\n  };\n\n  const handleMemeUnlikes = async () => {\n    const curMeme = {\n      title: meme.title,\n      memeID: meme.id,\n      url: meme.url,\n    };\n    const response = await memeService.unlikeMeme(curMeme);\n    setOurMeme(response.data);\n  };\n\n  const handleUserUnlikes = async () => {\n    const curUser = await checkLoggedIn();\n    await userService.unlikeMeme(curUser, memeID);\n  };\n\n  useEffect(() => {\n    fetchMemeByID();\n    fetchMemeByIDfromDatabase();\n    checkLiked();\n  }, []);\n\n  return (\n    <div>\n      <h1>{meme.name}</h1>\n      <img src={meme.url} height={500} />\n      <SecureContent\n        loggedInContent={\n          <div>\n            {\" \"}\n            <i\n              className=\"fas fa-thumbs-up\"\n              onClick={() => {\n                if (liked) {\n                  handleMemeUnlikes();\n                  handleUserUnlikes();\n                  setLiked(false);\n                } else {\n                  handleMemeLikes();\n                  handleUserLikes();\n                  setLiked(true);\n                }\n              }}\n            ></i>\n            {ourMeme && ourMeme.likes}\n            <i className=\"fas fa-thumbs-down\"></i>\n          </div>\n        }\n        nonloggedInContent={<div>please login to like or comment</div>}\n      />\n    </div>\n  );\n};\n\nexport default MemeDetails;\n"]},"metadata":{},"sourceType":"module"}