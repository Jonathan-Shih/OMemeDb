{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemesSearch = () => {\n  _s();\n\n  const titleRef = useRef();\n  const {\n    memeSearch\n  } = useParams();\n  const navigate = useNavigate();\n  const [memes, setMemes] = useState([]);\n  const meme_URL = \"https://api.imgflip.com/get_memes\";\n\n  const fetchMemes = async () => {\n    const searchString = titleRef.current.value || memeSearch;\n    console.log(searchString);\n    const response = await axios.get(`${meme_URL}`);\n\n    if (searchString === \"\") {\n      const first10 = response.data.data.memes.sort(() => Math.random() - 0.5).slice(0, 10);\n      setMemes(first10);\n    } else {\n      setMemes(response.data.data.memes.filter(meme => meme.name.toLowerCase().includes(searchString)));\n      titleRef.current.value = searchString;\n      navigate(`/meme-search/${searchString}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Memes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchMemes,\n          className: \"btn btn-primary float-end\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: titleRef,\n          className: \"form-control w-75\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), memes.map(meme => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: meme.url,\n            height: 30,\n            className: \"me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), meme.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MemesSearch, \"mV+5FAI7Quzyg3PC6LNCLjag2v0=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = MemesSearch;\nexport default MemesSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemesSearch\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-search.js"],"names":["React","useEffect","useRef","useState","axios","Link","useLocation","useNavigate","useParams","MemesSearch","titleRef","memeSearch","navigate","memes","setMemes","meme_URL","fetchMemes","searchString","current","value","console","log","response","get","first10","data","sort","Math","random","slice","filter","meme","name","toLowerCase","includes","map","url"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,WAA5B,EAAyCC,SAAzC,QAA0D,kBAA1D;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,QAAQ,GAAGR,MAAM,EAAvB;AACA,QAAM;AAAES,IAAAA;AAAF,MAAiBH,SAAS,EAAhC;AACA,QAAMI,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMY,QAAQ,GAAG,mCAAjB;;AACA,QAAMC,UAAU,GAAG,YAAY;AAC7B,UAAMC,YAAY,GAAGP,QAAQ,CAACQ,OAAT,CAAiBC,KAAjB,IAA0BR,UAA/C;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACA,UAAMK,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAW,GAAER,QAAS,EAAtB,CAAvB;;AACA,QAAIE,YAAY,KAAK,EAArB,EAAyB;AACvB,YAAMO,OAAO,GAAGF,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBZ,KAAnB,CACba,IADa,CACR,MAAMC,IAAI,CAACC,MAAL,KAAgB,GADd,EAEbC,KAFa,CAEP,CAFO,EAEJ,EAFI,CAAhB;AAGAf,MAAAA,QAAQ,CAACU,OAAD,CAAR;AACD,KALD,MAKO;AACLV,MAAAA,QAAQ,CACNQ,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBZ,KAAnB,CAAyBiB,MAAzB,CAAiCC,IAAD,IAC9BA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCjB,YAAjC,CADF,CADM,CAAR;AAKAP,MAAAA,QAAQ,CAACQ,OAAT,CAAiBC,KAAjB,GAAyBF,YAAzB;AACAL,MAAAA,QAAQ,CAAE,gBAAeK,YAAa,EAA9B,CAAR;AACD;AACF,GAlBD;;AAoBAhB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAEA,UAAjB;AAA6B,UAAA,SAAS,EAAC,2BAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAO,UAAA,GAAG,EAAEN,QAAZ;AAAsB,UAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAOGG,KAAK,CAACsB,GAAN,CAAWJ,IAAD,iBACT;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,GAAX;AAAA,kCACE;AAAK,YAAA,GAAG,EAAEA,IAAI,CAACK,GAAf;AAAoB,YAAA,MAAM,EAAE,EAA5B;AAAgC,YAAA,SAAS,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGL,IAAI,CAACC,IAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAnDD;;GAAMvB,W;UAEmBD,S,EACND,W;;;KAHbE,W;AAqDN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, useLocation, useNavigate, useParams } from \"react-router-dom\";\n\nconst MemesSearch = () => {\n  const titleRef = useRef();\n  const { memeSearch } = useParams();\n  const navigate = useNavigate();\n  const [memes, setMemes] = useState([]);\n  const meme_URL = \"https://api.imgflip.com/get_memes\";\n  const fetchMemes = async () => {\n    const searchString = titleRef.current.value || memeSearch;\n    console.log(searchString);\n    const response = await axios.get(`${meme_URL}`);\n    if (searchString === \"\") {\n      const first10 = response.data.data.memes\n        .sort(() => Math.random() - 0.5)\n        .slice(0, 10);\n      setMemes(first10);\n    } else {\n      setMemes(\n        response.data.data.memes.filter((meme) =>\n          meme.name.toLowerCase().includes(searchString)\n        )\n      );\n      titleRef.current.value = searchString;\n      navigate(`/meme-search/${searchString}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchMemes();\n  }, []);\n  return (\n    <div>\n      <h1>Search Memes</h1>\n\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">\n          <button onClick={fetchMemes} className=\"btn btn-primary float-end\">\n            Search\n          </button>\n          <input ref={titleRef} className=\"form-control w-75\" />\n        </li>\n        {memes.map((meme) => (\n          <li className=\"list-group-item\">\n            <Link to={`/`}>\n              <img src={meme.url} height={30} className=\"me-2\" />\n              {meme.name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MemesSearch;\n"]},"metadata":{},"sourceType":"module"}