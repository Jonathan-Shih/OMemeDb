{"ast":null,"code":"var _jsxFileName = \"/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchOmdb = () => {\n  _s();\n\n  const [memes, setMemes] = useState([]);\n  const {\n    searchString\n  } = useParams();\n  const titleRef = useRef();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const meme_URL = \"https://api.imgflip.com/get_memes\";\n\n  const fetchMemes = async () => {\n    const response = await axios.get(`${meme_URL}`);\n\n    if (titleRef.current.value === \"\") {\n      response.data.data.memes.sort(() => Math.random() - 0.5).slice(0, 1);\n    }\n\n    setMemes(response.data.data.memes.filter(meme => meme.name.toLowerCase().includes(titleRef.current.value.toLowerCase())));\n    console.log(memes); // navigate(`/omdb/${titleRef.current.value}`);\n  };\n\n  useEffect(() => {\n    if (searchString) {\n      titleRef.current.value = searchString;\n      fetchMemes();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Memes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchMemes,\n          className: \"btn btn-primary float-end\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: titleRef,\n          className: \"form-control w-75\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), memes.map(meme => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: meme.url,\n          height: 30,\n          className: \"me-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), meme.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchOmdb, \"GGwFoDbumPy3voSw2JilU3h5uQY=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n\n_c = SearchOmdb;\nexport default SearchOmdb;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchOmdb\");","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/screens/meme-search.js"],"names":["React","useEffect","useRef","useState","axios","Link","useLocation","useNavigate","useParams","SearchOmdb","memes","setMemes","searchString","titleRef","navigate","location","meme_URL","fetchMemes","response","get","current","value","data","sort","Math","random","slice","filter","meme","name","toLowerCase","includes","console","log","map","url"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,WAA5B,EAAyCC,SAAzC,QAA0D,kBAA1D;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAmBJ,SAAS,EAAlC;AACA,QAAMK,QAAQ,GAAGX,MAAM,EAAvB;AACA,QAAMY,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,QAAQ,GAAG,mCAAjB;;AACA,QAAMC,UAAU,GAAG,YAAY;AAC7B,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,GAAEH,QAAS,EAAtB,CAAvB;;AACA,QAAIH,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,KAA2B,EAA/B,EAAmC;AACjCH,MAAAA,QAAQ,CAACI,IAAT,CAAcA,IAAd,CAAmBZ,KAAnB,CAAyBa,IAAzB,CAA8B,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAApD,EAAyDC,KAAzD,CAA+D,CAA/D,EAAkE,CAAlE;AACD;;AACDf,IAAAA,QAAQ,CACNO,QAAQ,CAACI,IAAT,CAAcA,IAAd,CAAmBZ,KAAnB,CAAyBiB,MAAzB,CAAiCC,IAAD,IAC9BA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiClB,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,CAAuBS,WAAvB,EAAjC,CADF,CADM,CAAR;AAKAE,IAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ,EAV6B,CAW7B;AACD,GAZD;;AAcAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,YAAJ,EAAkB;AAChBC,MAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,GAAyBT,YAAzB;AACAK,MAAAA,UAAU;AACX;AACF,GALQ,EAKN,EALM,CAAT;AAMA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAEA,UAAjB;AAA6B,UAAA,SAAS,EAAC,2BAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAO,UAAA,GAAG,EAAEJ,QAAZ;AAAsB,UAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAOGH,KAAK,CAACwB,GAAN,CAAWN,IAAD,iBACT;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA,gCAEE;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACO,GAAf;AAAoB,UAAA,MAAM,EAAE,EAA5B;AAAgC,UAAA,SAAS,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGGP,IAAI,CAACC,IAHR;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAjDD;;GAAMpB,U;UAEqBD,S,EAERD,W,EACAD,W;;;KALbG,U;AAmDN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, useLocation, useNavigate, useParams } from \"react-router-dom\";\n\nconst SearchOmdb = () => {\n  const [memes, setMemes] = useState([]);\n  const { searchString } = useParams();\n  const titleRef = useRef();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const meme_URL = \"https://api.imgflip.com/get_memes\";\n  const fetchMemes = async () => {\n    const response = await axios.get(`${meme_URL}`);\n    if (titleRef.current.value === \"\") {\n      response.data.data.memes.sort(() => Math.random() - 0.5).slice(0, 1);\n    }\n    setMemes(\n      response.data.data.memes.filter((meme) =>\n        meme.name.toLowerCase().includes(titleRef.current.value.toLowerCase())\n      )\n    );\n    console.log(memes);\n    // navigate(`/omdb/${titleRef.current.value}`);\n  };\n\n  useEffect(() => {\n    if (searchString) {\n      titleRef.current.value = searchString;\n      fetchMemes();\n    }\n  }, []);\n  return (\n    <div>\n      <h1>Search Memes</h1>\n\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">\n          <button onClick={fetchMemes} className=\"btn btn-primary float-end\">\n            Search\n          </button>\n          <input ref={titleRef} className=\"form-control w-75\" />\n        </li>\n        {memes.map((meme) => (\n          <li className=\"list-group-item\">\n            {/* <Link to={`/omdb/details/${movie.imdbID}`}> */}\n            <img src={meme.url} height={30} className=\"me-2\" />\n            {meme.name}\n            {/* </Link> */}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchOmdb;\n"]},"metadata":{},"sourceType":"module"}