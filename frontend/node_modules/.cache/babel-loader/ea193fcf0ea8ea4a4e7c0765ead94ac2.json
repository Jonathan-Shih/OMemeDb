{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:4000/api/users\";\nconst api = axios.create({\n  withCredentials: true\n});\nexport const likeMeme = async (user, memeID) => {\n  const updatedLikedMemes = user.likedMemes;\n\n  if (!updatedLikedMemes.includes(memeID)) {\n    updatedLikedMemes.push(memeID);\n  }\n\n  const newUser = { ...user,\n    likedMemes: updatedLikedMemes\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\nexport const unlikeMeme = async (user, memeID) => {\n  const updatedLikedMemes = user.likedMemes.filter(curMemeID => curMemeID !== memeID);\n  const newUser = { ...user,\n    likedMemes: updatedLikedMemes\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\nexport const dislikeMeme = async (user, memeID) => {\n  const updatedDislikedMemes = user.dislikedMemes;\n\n  if (!updatedDislikedMemes.includes(memeID)) {\n    updatedDislikedMemes.push(memeID);\n  }\n\n  const newUser = { ...user,\n    dislikedMemes: updatedDislikedMemes\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\nexport const undislikeMeme = async (user, memeID) => {\n  const updatedDislikedMemes = user.dislikedMemes.filter(curMemeID => curMemeID !== memeID);\n  const newUser = { ...user,\n    dislikedMemes: updatedDislikedMemes\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\nexport const fetchUserById = async userID => {\n  const response = await api.get(`${API_URL}/${userID}`);\n  return response;\n};","map":{"version":3,"sources":["/Users/jonshih/Documents/spring2022/cs4550/final-proj/frontend/src/services/user-service.js"],"names":["axios","API_URL","api","create","withCredentials","likeMeme","user","memeID","updatedLikedMemes","likedMemes","includes","push","newUser","response","put","_id","unlikeMeme","filter","curMemeID","dislikeMeme","updatedDislikedMemes","dislikedMemes","undislikeMeme","fetchUserById","userID","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,OAAO,GAAG,iCAAhB;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAb,CAAZ;AAEA,OAAO,MAAMC,QAAQ,GAAG,OAAOC,IAAP,EAAaC,MAAb,KAAwB;AAC9C,QAAMC,iBAAiB,GAAGF,IAAI,CAACG,UAA/B;;AACA,MAAI,CAACD,iBAAiB,CAACE,QAAlB,CAA2BH,MAA3B,CAAL,EAAyC;AACvCC,IAAAA,iBAAiB,CAACG,IAAlB,CAAuBJ,MAAvB;AACD;;AACD,QAAMK,OAAO,GAAG,EACd,GAAGN,IADW;AAEdG,IAAAA,UAAU,EAAED;AAFE,GAAhB;AAIA,QAAMK,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAS,GAAEb,OAAQ,IAAGK,IAAI,CAACS,GAAI,EAA/B,EAAkCH,OAAlC,CAAvB;AACA,SAAOC,QAAP;AACD,CAXM;AAaP,OAAO,MAAMG,UAAU,GAAG,OAAOV,IAAP,EAAaC,MAAb,KAAwB;AAChD,QAAMC,iBAAiB,GAAGF,IAAI,CAACG,UAAL,CAAgBQ,MAAhB,CACvBC,SAAD,IAAeA,SAAS,KAAKX,MADL,CAA1B;AAGA,QAAMK,OAAO,GAAG,EACd,GAAGN,IADW;AAEdG,IAAAA,UAAU,EAAED;AAFE,GAAhB;AAIA,QAAMK,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAS,GAAEb,OAAQ,IAAGK,IAAI,CAACS,GAAI,EAA/B,EAAkCH,OAAlC,CAAvB;AACA,SAAOC,QAAP;AACD,CAVM;AAYP,OAAO,MAAMM,WAAW,GAAG,OAAOb,IAAP,EAAaC,MAAb,KAAwB;AACjD,QAAMa,oBAAoB,GAAGd,IAAI,CAACe,aAAlC;;AACA,MAAI,CAACD,oBAAoB,CAACV,QAArB,CAA8BH,MAA9B,CAAL,EAA4C;AAC1Ca,IAAAA,oBAAoB,CAACT,IAArB,CAA0BJ,MAA1B;AACD;;AACD,QAAMK,OAAO,GAAG,EACd,GAAGN,IADW;AAEde,IAAAA,aAAa,EAAED;AAFD,GAAhB;AAIA,QAAMP,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAS,GAAEb,OAAQ,IAAGK,IAAI,CAACS,GAAI,EAA/B,EAAkCH,OAAlC,CAAvB;AACA,SAAOC,QAAP;AACD,CAXM;AAaP,OAAO,MAAMS,aAAa,GAAG,OAAOhB,IAAP,EAAaC,MAAb,KAAwB;AACnD,QAAMa,oBAAoB,GAAGd,IAAI,CAACe,aAAL,CAAmBJ,MAAnB,CAC1BC,SAAD,IAAeA,SAAS,KAAKX,MADF,CAA7B;AAGA,QAAMK,OAAO,GAAG,EACd,GAAGN,IADW;AAEde,IAAAA,aAAa,EAAED;AAFD,GAAhB;AAIA,QAAMP,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAS,GAAEb,OAAQ,IAAGK,IAAI,CAACS,GAAI,EAA/B,EAAkCH,OAAlC,CAAvB;AACA,SAAOC,QAAP;AACD,CAVM;AAYP,OAAO,MAAMU,aAAa,GAAG,MAAOC,MAAP,IAAkB;AAC7C,QAAMX,QAAQ,GAAG,MAAMX,GAAG,CAACuB,GAAJ,CAAS,GAAExB,OAAQ,IAAGuB,MAAO,EAA7B,CAAvB;AACA,SAAOX,QAAP;AACD,CAHM","sourcesContent":["import axios from \"axios\";\nconst API_URL = \"http://localhost:4000/api/users\";\nconst api = axios.create({ withCredentials: true });\n\nexport const likeMeme = async (user, memeID) => {\n  const updatedLikedMemes = user.likedMemes;\n  if (!updatedLikedMemes.includes(memeID)) {\n    updatedLikedMemes.push(memeID);\n  }\n  const newUser = {\n    ...user,\n    likedMemes: updatedLikedMemes,\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\n\nexport const unlikeMeme = async (user, memeID) => {\n  const updatedLikedMemes = user.likedMemes.filter(\n    (curMemeID) => curMemeID !== memeID\n  );\n  const newUser = {\n    ...user,\n    likedMemes: updatedLikedMemes,\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\n\nexport const dislikeMeme = async (user, memeID) => {\n  const updatedDislikedMemes = user.dislikedMemes;\n  if (!updatedDislikedMemes.includes(memeID)) {\n    updatedDislikedMemes.push(memeID);\n  }\n  const newUser = {\n    ...user,\n    dislikedMemes: updatedDislikedMemes,\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\n\nexport const undislikeMeme = async (user, memeID) => {\n  const updatedDislikedMemes = user.dislikedMemes.filter(\n    (curMemeID) => curMemeID !== memeID\n  );\n  const newUser = {\n    ...user,\n    dislikedMemes: updatedDislikedMemes,\n  };\n  const response = await api.put(`${API_URL}/${user._id}`, newUser);\n  return response;\n};\n\nexport const fetchUserById = async (userID) => {\n  const response = await api.get(`${API_URL}/${userID}`);\n  return response;\n};\n"]},"metadata":{},"sourceType":"module"}